// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package identity

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// IdentityABI is the input ABI used to generate the binding from.
const IdentityABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC165ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REGISTRY_TOPIC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANAGEMENT_KEY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getKey\",\"outputs\":[{\"name\":\"purposes\",\"type\":\"uint256[]\"},{\"name\":\"keyType\",\"type\":\"uint256\"},{\"name\":\"key\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"issuer\",\"type\":\"address\"},{\"name\":\"topic\",\"type\":\"uint256\"}],\"name\":\"getClaimId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subject\",\"type\":\"address\"},{\"name\":\"topic\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"claimToSign\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_purpose\",\"type\":\"uint256\"},{\"name\":\"_keyType\",\"type\":\"uint256\"}],\"name\":\"addKey\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_SCHEME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_topic\",\"type\":\"uint256\"}],\"name\":\"getClaimIdsByType\",\"outputs\":[{\"name\":\"claimIds\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RSA_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTransactionCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"actionThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"toSign\",\"type\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"getSignatureAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ECDSA_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"delegatedExecute\",\"outputs\":[{\"name\":\"executionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"removeClaim\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"removeKey\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"refreshClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"execution\",\"outputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"needsApprove\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addrToKey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"METAID_TOPIC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_func\",\"type\":\"bytes4\"},{\"name\":\"_executable\",\"type\":\"bool\"}],\"name\":\"setFunc\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_approve\",\"type\":\"bool\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACTION_KEY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_func\",\"type\":\"bytes4\"}],\"name\":\"keyCanExecute\",\"outputs\":[{\"name\":\"executable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC725ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ECDSA_SCHEME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"getKeysByPurpose\",\"outputs\":[{\"name\":\"keys\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ENCRYPTION_KEY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESIDENCE_TOPIC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managementThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROFILE_TOPIC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CUSTOM_KEY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_topic\",\"type\":\"uint256\"},{\"name\":\"_scheme\",\"type\":\"uint256\"},{\"name\":\"issuer\",\"type\":\"address\"},{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"addClaim\",\"outputs\":[{\"name\":\"claimRequestId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LABEL_TOPIC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"name\":\"executionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESTORE_KEY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC735ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"b\",\"type\":\"bytes\"}],\"name\":\"getFunctionSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CLAIM_SIGNER_KEY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"getClaim\",\"outputs\":[{\"name\":\"topic\",\"type\":\"uint256\"},{\"name\":\"scheme\",\"type\":\"uint256\"},{\"name\":\"issuer\",\"type\":\"address\"},{\"name\":\"signature\",\"type\":\"bytes\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"uri\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"changeManagementThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"purpose\",\"type\":\"uint256\"}],\"name\":\"keyHasPurpose\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ASSIST_KEY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_topic\",\"type\":\"uint256\"},{\"name\":\"_scheme\",\"type\":\"uint256\"},{\"name\":\"issuer\",\"type\":\"address\"},{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_uri\",\"type\":\"string\"},{\"name\":\"_idSignature\",\"type\":\"bytes\"}],\"name\":\"addClaimByProxy\",\"outputs\":[{\"name\":\"claimRequestId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"changeActionThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DELEGATE_KEY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RSA_SCHEME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numClaims\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_managementKey\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"claimRequestId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"purpose\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"keyType\",\"type\":\"uint256\"}],\"name\":\"KeyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"purpose\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"keyType\",\"type\":\"uint256\"}],\"name\":\"KeyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecutionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecutionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogUnpause\",\"type\":\"event\"}]"

// IdentityBin is the compiled bytecode used for deploying new contracts.
const IdentityBin = `6080604052600160008190558080556005805460ff191690556007553480156200002857600080fd5b5060405160208062004765833981016040525160006001600682620000556401000000006200022b810204565b7fffffffff0000000000000000000000000000000000000000000000000000000016815260208101919091526040016000908120805460ff191692151592909217909155600190600690620000b26401000000006200024f810204565b7fffffffff0000000000000000000000000000000000000000000000000000000016815260208101919091526040016000908120805460ff1916921515929092179091556001906006906200010f64010000000062000273810204565b7fffffffff000000000000000000000000000000000000000000000000000000001681526020810191909152604001600020805460ff1916911515919091179055620001648264010000000062000297810204565b90506200017d81600180640100000000620002a3810204565b620001958160026001640100000000620002a3810204565b620001ad8160036001640100000000620002a3810204565b60016000818155818055600690620001cd64010000000062000273810204565b620001e06401000000006200024f810204565b187fffffffff000000000000000000000000000000000000000000000000000000001681526020810191909152604001600020805460ff191691151591909117905550620003669050565b7f01ffc9a70000000000000000000000000000000000000000000000000000000090565b7fdc3d2a7b0000000000000000000000000000000000000000000000000000000090565b7f107653790000000000000000000000000000000000000000000000000000000090565b600160a060020a031690565b620002c060028484846401000000006200402c620002f482021704565b6040518190839085907f480000bb1edad8ca1470381cc334b1917fbd51c6531f3a623ea8e0ec7e38a6e990600090a4505050565b60008381526020858152604082208054600181018255818452919092200183905560028101541515620003305760028101849055600181018290555b50506000908152600180840160209081526040832080548084018255908452922090910191909155600290910180549091019055565b6143ef80620003766000396000f30060806040526004361061028f5763ffffffff60e060020a60003504166301ffc9a7811461029157806302e7491e146102c75780630440b43a146102f9578063058b316c1461032057806312aaac7014610335578063190db862146103ae5780631d203be8146103d25780631d3812401461043b578063251de3e9146102f9578063262b54f5146104595780632d32d442146104c15780632e7700f0146104d657806338f4edd4146104eb5780633b8a12c8146105005780633f4ba83a1461057a57806349991ec8146103205780634da34c2c1461058f5780634eee424a1461063c57806353d413c5146106545780635c975abb1461066f5780635d7bc3fc146106845780635dccebba1461069c57806363f14c3c146107535780636e4c431114610774578063710ca55014610320578063724a4b3b1461078f578063747442d3146107c557806375e5598c146104c1578063765b3042146107e25780637d96fa581461081357806382d09446146103205780638456cb59146108285780639010f7261461083d5780639e140cc814610855578063a550f0c7146104c1578063aa0a51421461086a578063ae62838614610855578063affed0e01461087f578063b132734e14610894578063b1a34e0d146108a9578063b1e9f64c14610991578063b61d27f6146109a6578063b9133d6314610a0f578063bf2f20ad14610a24578063c32b351814610a39578063c6702187146102f9578063c9100bcb14610a92578063c9d24ecc14610c15578063ccfe586814610c2a578063d202158d14610c42578063dbfa74b714610991578063e0610ba314610c5d578063e99896b814610d83578063ead09fab14610d9b578063f22d08a6146104c1578063f5074f4114610db0578063fc0fc84914610dd1575b005b34801561029d57600080fd5b506102b3600160e060020a031960043516610de6565b604080519115158252519081900360200190f35b3480156102d357600080fd5b506102dc610e05565b60408051600160e060020a03199092168252519081900360200190f35b34801561030557600080fd5b5061030e610e2a565b60408051918252519081900360200190f35b34801561032c57600080fd5b5061030e610e2f565b34801561034157600080fd5b5061034d600435610e34565b60408051602080820185905291810183905260608082528551908201528451909182916080830191878101910280838360005b83811015610398578181015183820152602001610380565b5050505090500194505050505060405180910390f35b3480156103ba57600080fd5b5061030e600160a060020a0360043516602435610ed9565b3480156103de57600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261030e948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610f869650505050505050565b34801561044757600080fd5b506102b3600435602435604435611086565b34801561046557600080fd5b506104716004356110df565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104ad578181015183820152602001610495565b505050509050019250505060405180910390f35b3480156104cd57600080fd5b5061030e611142565b3480156104e257600080fd5b5061030e611147565b3480156104f757600080fd5b5061030e61114d565b34801561050c57600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261055e9583359536956044949193909101919081908401838280828437509497506111539650505050505050565b60408051600160a060020a039092168252519081900360200190f35b34801561058657600080fd5b5061028f611256565b34801561059b57600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261030e948235600160a060020a031694602480359536959460649492019190819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b8a359b909a9099940197509195509182019350915081908401838280828437509497506112af9650505050505050565b34801561064857600080fd5b506102b36004356113da565b34801561066057600080fd5b506102b36004356024356119e3565b34801561067b57600080fd5b506102b3611a7a565b34801561069057600080fd5b506102b3600435611a83565b3480156106a857600080fd5b506106b4600435611dec565b6040518085600160a060020a0316600160a060020a0316815260200184815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156107155781810151838201526020016106fd565b50505050905090810190601f1680156107425780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561075f57600080fd5b5061030e600160a060020a0360043516611ea8565b34801561078057600080fd5b5061055e600435602435611eb4565b34801561079b57600080fd5b506102b3600435600160a060020a0360243516600160e060020a0319604435166064351515611eeb565b3480156107d157600080fd5b506102b36004356024351515611f4c565b3480156107ee57600080fd5b506102b3600435600160a060020a0360243516600160e060020a0319604435166122eb565b34801561081f57600080fd5b506102dc61232d565b34801561083457600080fd5b5061028f612351565b34801561084957600080fd5b506104716004356123ac565b34801561086157600080fd5b5061030e61240d565b34801561087657600080fd5b5061030e612412565b34801561088b57600080fd5b5061030e612418565b3480156108a057600080fd5b5061030e61241e565b3480156108b557600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261030e948035946024803595600160a060020a0360443516953695608494930191819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506124239650505050505050565b34801561099d57600080fd5b5061030e6128d4565b3480156109b257600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261030e948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506128d99650505050505050565b348015610a1b57600080fd5b5061030e612900565b348015610a3057600080fd5b506102dc612905565b348015610a4557600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102dc9436949293602493928401919081908401838280828437509497506129299650505050505050565b348015610a9e57600080fd5b50610aaa6004356129ad565b6040518087815260200186815260200185600160a060020a0316600160a060020a03168152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015610b13578181015183820152602001610afb565b50505050905090810190601f168015610b405780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015610b73578181015183820152602001610b5b565b50505050905090810190601f168015610ba05780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b83811015610bd3578181015183820152602001610bbb565b50505050905090810190601f168015610c005780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b348015610c2157600080fd5b5061030e612c03565b348015610c3657600080fd5b5061028f600435612c09565b348015610c4e57600080fd5b506102b3600435602435612c5c565b348015610c6957600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261030e948035946024803595600160a060020a0360443516953695608494930191819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750612c709650505050505050565b348015610d8f57600080fd5b5061028f60043561308e565b348015610da757600080fd5b5061030e6130e1565b348015610dbc57600080fd5b5061028f600160a060020a03600435166130e6565b348015610ddd57600080fd5b5061030e61311a565b600160e060020a03191660009081526006602052604090205460ff1690565b7f01ffc9a7000000000000000000000000000000000000000000000000000000005b90565b600381565b600181565b6060600080610e4161420f565b60008581526002602090815260409182902082518154608093810282018401909452606081018481529093919284928491840182828015610ea157602002820191906000526020600020905b815481526020019060010190808311610e8d575b505050918352505060018201546020808301919091526002909201546040918201528251918301519201519097919650945092505050565b600082826040516020018083600160a060020a0316600160a060020a03166c01000000000000000000000000028152601401828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310610f535780518252601f199092019160209182019101610f34565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209695505050505050565b60008383836040516020018084600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140183815260200182805190602001908083835b60208310610fea5780518252601f199092019160209182019101610fcb565b6001836020036101000a03801982511681845116808217855250505050505090500193505050506040516020818303038152906040526040518082805190602001908083835b6020831061104f5780518252601f199092019160209182019101611030565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902090505b9392505050565b6000611090613120565b151561109b57600080fd5b60055460ff16156110ab57600080fd5b6110bd6002858563ffffffff61315216565b156110ca5750600061107f565b6110d5848484613236565b5060019392505050565b6000818152600b602090815260409182902080548351818402810184019094528084526060939283018282801561113657602002820191906000526020600020905b81548152600190910190602001808311611121575b50505050509050919050565b600281565b60075490565b60015481565b600061107f826040805190810160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250856040516020018083805190602001908083835b602083106111c25780518252601f1990920191602091820191016111a3565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193945092839250908401908083835b602083106112225780518252601f199092019160209182019101611203565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209392505061327d9050565b61125e613120565b151561126957600080fd5b60055460ff16151561127a57600080fd5b6005805460ff191690556040517f730c1faaa977b67dacf1e2451ef54556e04a07d577785ff79f6d31f73502efc990600090a1565b600554600090819060ff16156112c457600080fd5b6113bf878787876040516020018085600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140184815260200183805190602001908083835b6020831061132a5780518252601f19909201916020918201910161130b565b51815160209384036101000a6000190180199092169116179052920193845250604080518085038152938201908190528351939650945084935085019190508083835b6020831061138c5780518252601f19909201916020918201910161136d565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902084611153565b90506113cd8188888861334d565b91505b5095945050505050565b60006113e461422f565b600554600090819060ff16156113f957600080fd5b6000858152600a60205260409020600201548590600160a060020a031680151561142257600080fd5b61142a613120565b156114345761150d565b33600160a060020a038216141561144a5761150d565b61146b61145561232d565b600160a060020a0383169063ffffffff61350916565b156115085780600160a060020a031663d202158d61148833611ea8565b6040805160e060020a63ffffffff85160281526004810192909252600260248301525160448083019260209291908290030181600087803b1580156114cc57600080fd5b505af11580156114e0573d6000803e3d6000fd5b505050506040513d60208110156114f657600080fd5b5051151561150357600080fd5b61150d565b600080fd5b6000878152600a6020908152604091829020825160c0810184528154815260018083015482850152600280840154600160a060020a0316838701526003840180548751601f9482161561010002600019019091169290920492830186900486028201860190965281815291949293606086019391908301828280156115d35780601f106115a8576101008083540402835291602001916115d3565b820191906000526020600020905b8154815290600101906020018083116115b657829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156116675780601f1061163c57610100808354040283529160200191611667565b820191906000526020600020905b81548152906001019060200180831161164a57829003601f168201915b505050918352505060058201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156116fb5780601f106116d0576101008083540402835291602001916116fb565b820191906000526020600020905b8154815290600101906020018083116116de57829003601f168201915b505050919092525050506040810151909550600160a060020a0316151561172157600080fd5b6000878152600a6020526040812081815560018101829055600281018054600160a060020a031916905590611759600383018261426f565b61176760048301600061426f565b61177560058301600061426f565b505084516000908152600b60205260408120945092505b835483101561182c57835487908590859081106117a557fe5b6000918252602090912001541415611821578354849060001981019081106117c957fe5b906000526020600020015484848154811015156117e257fe5b60009182526020909120015583548490600019810190811061180057fe5b6000918252602082200155835461181b8560001983016142b6565b5061182c565b60019092019161178c565b600c60008154809291906001900391905055508460400151600160a060020a0316856000015188600019167f3cf57863a89432c61c4a27073c6ee39e8a764bff5a05aebfbcdcdc80b2e6130a886020015189606001518a608001518b60a0015160405180858152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b838110156118d75781810151838201526020016118bf565b50505050905090810190601f1680156119045780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b8381101561193757818101518382015260200161191f565b50505050905090810190601f1680156119645780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b8381101561199757818101518382015260200161197f565b50505050905090810190601f1680156119c45780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a45060019695505050505050565b6000806119ee613120565b15156119f957600080fd5b60055460ff1615611a0957600080fd5b611a1b6002858563ffffffff61315216565b1515611a2a5760009150611a73565b611a3c6002858563ffffffff6135c016565b6040519091508190849086907f585a4aef50f8267a92b32412b331b20f7f8b96f2245b253b9cc50dcc621d339790600090a4600191505b5092915050565b60055460ff1681565b6000611a8d61422f565b60055460ff1615611a9d57600080fd5b6000838152600a60205260409020600201548390600160a060020a0316801515611ac657600080fd5b611ace613120565b15611ad857611b91565b33600160a060020a0382161415611aee57611b91565b611af961145561232d565b156115085780600160a060020a031663d202158d611b1633611ea8565b6040805160e060020a63ffffffff85160281526004810192909252600260248301525160448083019260209291908290030181600087803b158015611b5a57600080fd5b505af1158015611b6e573d6000803e3d6000fd5b505050506040513d6020811015611b8457600080fd5b50511515611b9157600080fd5b6000858152600a6020908152604091829020825160c0810184528154815260018083015482850152600280840154600160a060020a0316838701526003840180548751601f948216156101000260001901909116929092049283018690048602820186019096528181529194929360608601939190830182828015611c575780601f10611c2c57610100808354040283529160200191611c57565b820191906000526020600020905b815481529060010190602001808311611c3a57829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015611ceb5780601f10611cc057610100808354040283529160200191611ceb565b820191906000526020600020905b815481529060010190602001808311611cce57829003601f168201915b505050918352505060058201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015611d7f5780601f10611d5457610100808354040283529160200191611d7f565b820191906000526020600020905b815481529060010190602001808311611d6257829003601f168201915b505050919092525050506040810151909350600160a060020a03161515611da557600080fd5b611dc68360000151846020015185604001518660600151876080015161376b565b1515611ddf57611dd5856113da565b5060009350611de4565b600193505b505050919050565b60086020908152600091825260409182902080546001808301546002808501805488516101009582161595909502600019011691909104601f8101879004870284018701909752868352600160a060020a03909316959094919291830182828015611e985780601f10611e6d57610100808354040283529160200191611e98565b820191906000526020600020905b815481529060010190602001808311611e7b57829003601f168201915b5050505050908060030154905084565b600160a060020a031690565b600960205281600052604060002081815481101515611ecf57fe5b600091825260209091200154600160a060020a03169150829050565b6000611ef5613120565b1515611f0057600080fd5b60055460ff1615611f1057600080fd5b611f2160028663ffffffff6138a216565b1515611f2c57600080fd5b611f4060028686868663ffffffff61393416565b50600195945050505050565b60055460009081908190819060ff1615611f6557600080fd5b851515611f7157600080fd5b60008681526008602052604090208054909350600160a060020a03161515611f9857600080fd5b825460028085018054604080516020601f600019600186161561010002019094169590950492830185900485028101850190915281815261203f943394600160a060020a03909116939192908301828280156120355780601f1061200a57610100808354040283529160200191612035565b820191906000526020600020905b81548152906001019060200180831161201857829003601f168201915b5050505050613981565b50604080518615158152905187917fb3932da477fe5d6c8ff2eafef050c0f3a1af18fc07121001482600f36f3715d8919081900360200190a26000868152600960205260409020915084151561218a575060005b815481101561218157815433908390839081106120ac57fe5b600091825260209091200154600160a060020a03161415612179578154829060001981019081106120d957fe5b6000918252602090912001548254600160a060020a03909116908390839081106120ff57fe5b60009182526020909120018054600160a060020a031916600160a060020a039290921691909117905581548290600019810190811061213a57fe5b60009182526020909120018054600160a060020a031916905581546121638360001983016142b6565b50600383018054600190810190915593506122e2565b600101612093565b600093506122e2565b5060005b81548110156121cf57815433908390839081106121a757fe5b600091825260209091200154600160a060020a031614156121c757600080fd5b60010161218e565b8154600181018355600083815260209020018054600160a060020a03191633179055600383018054600019019081905515156122dd57604080516080810182528454600160a060020a031681526001808601546020808401919091526002808801805486516101009582161595909502600019011691909104601f810183900483028401830186528084526122d6958c95948a9491860193909290918301828280156122bc5780601f10612291576101008083540402835291602001916122bc565b820191906000526020600020905b81548152906001019060200180831161229f57829003601f168201915b505050505081526020016003820154815250506001613b32565b93506122e2565b600193505b50505092915050565b6000838152600260209081526040808320600160a060020a03861684526003018252808320600160e060020a03198516845290915290205460ff169392505050565b7fdc3d2a7b0000000000000000000000000000000000000000000000000000000090565b612359613120565b151561236457600080fd5b60055460ff161561237457600080fd5b6005805460ff191660011790556040517f4b314b34e912fda7f95e7d23e9c8c95f82f0aff1984e4ce592a0b005f905562490600090a1565b6000818152600360209081526040918290208054835181840281018401909452808452606093928301828280156111365760200282019190600052602060002090815481526001909101906020018083116111215750505050509050919050565b600481565b60005481565b60075481565b600881565b60055460009081908190819060ff161561243c57600080fd5b6124498a8a8a8a8a61376b565b151561245457600080fd5b61245c613120565b92508215156126aa576040517fb61d27f600000000000000000000000000000000000000000000000000000000815230600482018181526000602484018190526060604485019081523660648601819052939463b61d27f694869484939192909190608401848480828437820191505095505050505050602060405180830381600087803b1580156124ed57600080fd5b505af1158015612501573d6000803e3d6000fd5b505050506040513d602081101561251757600080fd5b8101908080519060200190929190505050935087600160a060020a03168a857fe6b6db97dedfb44cbced367387e40b3f92dbee1b1be87f9367f7b673532b0d698c8b8b8b60405180858152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b838110156125a657818101518382015260200161258e565b50505050905090810190601f1680156125d35780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b838110156126065781810151838201526020016125ee565b50505050905090810190601f1680156126335780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b8381101561266657818101518382015260200161264e565b50505050905090810190601f1680156126935780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a46128c7565b6126b4888b610ed9565b6000818152600a6020526040902060020154909250600160a060020a031615156126ec576126e7828b8b8b8b8b8b613db4565b6128c7565b506000818152600a60209081526040909120600181018a90558751909161271a9160038401918a01906142df565b50855161273090600483019060208901906142df565b50845161274690600583019060208801906142df565b5087600160a060020a03168a83600019167f3bab293fc00db832d7619a9299914251b8747c036867ec056cbd506f60135b138c8b8b8b60405180858152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b838110156127c75781810151838201526020016127af565b50505050905090810190601f1680156127f45780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b8381101561282757818101518382015260200161280f565b50505050905090810190601f1680156128545780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b8381101561288757818101518382015260200161286f565b50505050905090810190601f1680156128b45780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a45b5050509695505050505050565b600581565b60055460009060ff16156128ec57600080fd5b6128f83385858561334d565b949350505050565b600781565b7f107653790000000000000000000000000000000000000000000000000000000090565b600080805b6004811015611a735780600802848281518110151561294957fe5b60209101015160029190910a7f0100000000000000000000000000000000000000000000000000000000000000918290049091027fff000000000000000000000000000000000000000000000000000000000000001604919091179060010161292e565b600080600060608060606129bf61422f565b6000888152600a6020908152604091829020825160c0810184528154815260018083015482850152600280840154600160a060020a0316838701526003840180548751601f948216156101000260001901909116929092049283018690048602820186019096528181529194929360608601939190830182828015612a855780601f10612a5a57610100808354040283529160200191612a85565b820191906000526020600020905b815481529060010190602001808311612a6857829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015612b195780601f10612aee57610100808354040283529160200191612b19565b820191906000526020600020905b815481529060010190602001808311612afc57829003601f168201915b505050918352505060058201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015612bad5780601f10612b8257610100808354040283529160200191612bad565b820191906000526020600020905b815481529060010190602001808311612b9057829003601f168201915b505050919092525050506040810151909150600160a060020a03161515612bd357600080fd5b8051602082015160408301516060840151608085015160a090950151939c929b5090995097509195509350915050565b60045490565b60055460009060ff1615612c1c57600080fd5b612c24613120565b1515612c2f57600080fd5b60008211612c3c57600080fd5b612c4660016123ac565b51905080821115612c5657600080fd5b50600055565b600061107f6002848463ffffffff61315216565b60055460009081908190819060ff1615612c8957600080fd5b612c968b8b8b8b8b61376b565b1515612ca157600080fd5b612e3a8b8b8b8b8b8b6040516020018087815260200186815260200185600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140184805190602001908083835b60208310612d0f5780518252601f199092019160209182019101612cf0565b51815160209384036101000a600019018019909216911617905286519190930192860191508083835b60208310612d575780518252601f199092019160209182019101612d38565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310612d9f5780518252601f199092019160209182019101612d80565b6001836020036101000a03801982511681845116808217855250505050505090500196505050505050506040516020818303038152906040526040518082805190602001908083835b60208310612e075780518252601f199092019160209182019101612de8565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902086611153565b9250612e58612e4884611ea8565b600290600163ffffffff61315216565b1515612e6357600080fd5b612e6d898c610ed9565b6000818152600a6020526040902060020154909250600160a060020a03161515612ea557612ea0828c8c8c8c8c8c613db4565b613080565b506000818152600a60209081526040909120600181018b905588519091612ed39160038401918b01906142df565b508651612ee990600483019060208a01906142df565b508551612eff90600583019060208901906142df565b5088600160a060020a03168b83600019167f3bab293fc00db832d7619a9299914251b8747c036867ec056cbd506f60135b138d8c8c8c60405180858152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015612f80578181015183820152602001612f68565b50505050905090810190601f168015612fad5780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015612fe0578181015183820152602001612fc8565b50505050905090810190601f16801561300d5780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b83811015613040578181015183820152602001613028565b50505050905090810190601f16801561306d5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a45b505050979650505050505050565b60055460009060ff16156130a157600080fd5b6130a9613120565b15156130b457600080fd5b600082116130c157600080fd5b6130cb60026123ac565b519050808211156130db57600080fd5b50600155565b600681565b6130ee613120565b15156130f957600080fd5b600160a060020a038116151561310e57600080fd5b80600160a060020a0316ff5b600c5481565b60003330141561313257506001610e27565b60005460011461314157600080fd5b61314d612e4833611ea8565b905090565b600061315c61420f565b60008481526020868152604080832081518154608094810282018501909352606081018381529093919284928491908401828280156131ba57602002820191906000526020600020905b8154815260200190600101908083116131a6575b50505091835250506001820154602082015260029091015460409182015281015190925015156131ed576000925061322d565b5060005b81515181101561322d57815180518591908390811061320c57fe5b906020019060200201511415613225576001925061322d565b6001016131f1565b50509392505050565b613249600284848463ffffffff61402c16565b6040518190839085907f480000bb1edad8ca1470381cc334b1917fbd51c6531f3a623ea8e0ec7e38a6e990600090a4505050565b6000806000808451604114151561329757600093506122e2565b50505060208201516040830151606084015160001a601b60ff821610156132bc57601b015b8060ff16601b141580156132d457508060ff16601c14155b156132e257600093506122e2565b60408051600080825260208083018085528a905260ff8516838501526060830187905260808301869052925160019360a0808501949193601f19840193928390039091019190865af115801561333c573d6000803e3d6000fd5b5050506020604051035193506122e2565b60008061335861435d565b613363878786613981565b91506133743087878760075461409d565b92508486600160a060020a0316847f8afcfabcb00e47a53a8fc3e9f23ff47ee1926194bb1350dd007c50b412a6cee8876040518080602001828103825283818151815260200191508051906020019080838360005b838110156133e15781810151838201526020016133c9565b50505050905090810190601f16801561340e5780820380516001836020036101000a031916815260200191505b509250505060405180910390a45060078054600101905560408051608081018252600160a060020a038716815260208101869052908101849052606081018290528115156134685761346283826000613b32565b506134ff565b60008381526008602090815260409182902083518154600160a060020a031916600160a060020a039091161781558382015160018201559183015180518493926134b99260028501929101906142df565b50606091909101516003909101556000838152600960209081526040822080546001810182559083529120018054600160a060020a031916600160a060020a0389161790555b5050949350505050565b60008080613537857f01ffc9a7000000000000000000000000000000000000000000000000000000006141c3565b9092509050811580613547575080155b1561355557600092506135b8565b61356785600160e060020a03196141c3565b909250905081158061357857508015155b1561358657600092506135b8565b61359085856141c3565b90925090506001821480156135a55750806001145b156135b357600192506135b8565b600092505b505092915050565b6000828152602084905260408120600181015491805b8254821015613680578483838154811015156135ee57fe5b906000526020600020015414156136755782548390600019810190811061361157fe5b9060005260206000200154838381548110151561362a57fe5b60009182526020909120015582548390600019810190811061364857fe5b600091825260208220015582546136638460001983016142b6565b50600287018054600019019055613680565b6001909101906135d6565b825415156136b2576000868152602088905260408120906136a1828261438f565b506000600182018190556002909101555b5050600083815260018601602052604081205b805482101561376157805486908290849081106136de57fe5b60009182526020909120015414156137565780548190600019810190811061370257fe5b9060005260206000200154818381548110151561371b57fe5b60009182526020909120015580548190600019810190811061373957fe5b600091825260208220015580546137548260001983016142b6565b505b6001909101906136c5565b5050509392505050565b60008060018614156138995761378b613785308986610f86565b85611153565b905080600160a060020a031685600160a060020a031614156137b057600191506113d0565b600160a060020a0385163014156137e4576137dd6137cd82611ea8565b600290600363ffffffff61315216565b91506113d0565b6138056137ef61232d565b600160a060020a0387169063ffffffff61350916565b156138995784600160a060020a031663d202158d61382283611ea8565b6040805160e060020a63ffffffff85160281526004810192909252600360248301525160448083019260209291908290030181600087803b15801561386657600080fd5b505af115801561387a573d6000803e3d6000fd5b505050506040513d602081101561389057600080fd5b505191506113d0565b600091506113d0565b60006138ac61420f565b600083815260208581526040918290208251815460809381028201840190945260608101848152909391928492849184018282801561390a57602002820191906000526020600020905b8154815260200190600101908083116138f6575b50505091835250506001820154602082015260029091015460409182015201511515949350505050565b600093845260209485526040808520600160a060020a03909416855260039093018552828420600160e060020a0319909216845293528120805492151560ff199093169290921790915590565b6000600160a060020a038316301415613a2c57600160a060020a0384163014156139ae5750600054613a27565b6139ba612e4885611ea8565b80613a1957506139dc6139cc85611ea8565b600290600763ffffffff61315216565b8015613a1957507f1d38124000000000000000000000000000000000000000000000000000000000613a0d83612929565b600160e060020a031916145b156115085750600054600019015b61107f565b600160a060020a0383161515613a4157600080fd5b600160a060020a038416301415613a5b575060015461107f565b613a76613a6785611ea8565b6002908163ffffffff61315216565b80613a985750613a98613a8885611ea8565b600290600663ffffffff61315216565b80613b205750613aba613aaa85611ea8565b600290600863ffffffff61315216565b8015613b20575060026000613ace86611ea8565b815260208082019290925260409081016000908120600160a060020a0387168252600301909252812090613b0184612929565b600160e060020a031916815260208101919091526040016000205460ff165b1561150857506001546000190161107f565b81516000908190600160a060020a03161515613b4d57600080fd5b8360000151600160a060020a03168460200151856040015160405180828051906020019080838360005b83811015613b8f578181015183820152602001613b77565b50505050905090810190601f168015613bbc5780820380516001836020036101000a031916815260200191505b5091505060006040518083038185875af1925050509050801515613c945783602001518460000151600160a060020a0316867fe10c49d9f7c71da23262367013434763cfdb2332267641728d25cd712c5c6a6887604001516040518080602001828103825283818151815260200191508051906020019080838360005b83811015613c51578181015183820152602001613c39565b50505050905090810190601f168015613c7e5780820380516001836020036101000a031916815260200191505b509250505060405180910390a460009150613dac565b83602001518460000151600160a060020a0316867f1f920dbda597d7bf95035464170fa58d0a4b57f13a1c315ace6793b9f63688b887604001516040518080602001828103825283818151815260200191508051906020019080838360005b83811015613d0b578181015183820152602001613cf3565b50505050905090810190601f168015613d385780820380516001836020036101000a031916815260200191505b509250505060405180910390a4821515613d555760019150613dac565b60008581526008602052604081208054600160a060020a03191681556001810182905590613d86600283018261426f565b506000600391909101819055858152600960205260408120613da79161438f565b600191505b509392505050565b6040805160c0810182528781526020808201888152600160a060020a03888116848601908152606085018981526080860189905260a0860188905260008e8152600a865296909620855181559251600184015551600283018054600160a060020a0319169190921617905592518051929392613e3692600385019201906142df565b5060808201518051613e529160048401916020909101906142df565b5060a08201518051613e6e9160058401916020909101906142df565b5050506000868152600b60209081526040808320805460018181018355918552838520018b9055600c80549091019055805188815260808184018181528851918301919091528751600160a060020a038a16958c958e957f46149b18aa084502c3f12bc75e19eda8bda8d102b82cce8474677a6d0d5f43c5958e958d958d958d959394929392850192606086019260a0870192918a01918190849084905b83811015613f24578181015183820152602001613f0c565b50505050905090810190601f168015613f515780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015613f84578181015183820152602001613f6c565b50505050905090810190601f168015613fb15780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b83811015613fe4578181015183820152602001613fcc565b50505050905090810190601f1680156140115780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a450505050505050565b600083815260208581526040822080546001810182558184529190922001839055600281015415156140675760028101849055600181018290555b50506000908152600180840160209081526040832080548084018255908452922090910191909155600290910180549091019055565b600085858585856040516020018086600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140185600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140184815260200183805190602001908083835b6020831061412a5780518252601f19909201916020918201910161410b565b51815160209384036101000a600019018019909216911617905292019384525060408051808503815293820190819052835193975095508594508601925081905083835b6020831061418d5780518252601f19909201916020918201910161416e565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209998505050505050505050565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000080825260048201839052600091829190602081818189617530fa905190969095509350505050565b604080516060818101835281526000602082018190529181019190915290565b60c06040519081016040528060008152602001600081526020016000600160a060020a031681526020016060815260200160608152602001606081525090565b50805460018160011615610100020316600290046000825580601f1061429557506142b3565b601f0160209004906000526020600020908101906142b391906143a9565b50565b8154818355818111156142da576000838152602090206142da9181019083016143a9565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061432057805160ff191683800117855561434d565b8280016001018555821561434d579182015b8281111561434d578251825591602001919060010190614332565b506143599291506143a9565b5090565b6080604051908101604052806000600160a060020a031681526020016000815260200160608152602001600081525090565b50805460008255906000526020600020908101906142b391905b610e2791905b8082111561435957600081556001016143af5600a165627a7a7230582064e869b0aa00b770013437ee3a2aa8f3dcf348bdb0e17da3b4a9839a5e83e3890029`

// DeployIdentity deploys a new Ethereum contract, binding an instance of Identity to it.
func DeployIdentity(auth *bind.TransactOpts, backend bind.ContractBackend, _managementKey common.Address) (common.Address, *types.Transaction, *Identity, error) {
	parsed, err := abi.JSON(strings.NewReader(IdentityABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(IdentityBin), backend, _managementKey)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Identity{IdentityCaller: IdentityCaller{contract: contract}, IdentityTransactor: IdentityTransactor{contract: contract}, IdentityFilterer: IdentityFilterer{contract: contract}}, nil
}

// Identity is an auto generated Go binding around an Ethereum contract.
type Identity struct {
	Address            *common.Address
	IdentityCaller     // Read-only binding to the contract
	IdentityTransactor // Write-only binding to the contract
	IdentityFilterer   // Log filterer for contract events
}

// IdentityCaller is an auto generated read-only Go binding around an Ethereum contract.
type IdentityCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IdentityTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IdentityTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IdentityFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IdentityFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IdentitySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IdentitySession struct {
	Contract     *Identity         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IdentityCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IdentityCallerSession struct {
	Contract *IdentityCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// IdentityTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IdentityTransactorSession struct {
	Contract     *IdentityTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// IdentityRaw is an auto generated low-level Go binding around an Ethereum contract.
type IdentityRaw struct {
	Contract *Identity // Generic contract binding to access the raw methods on
}

// IdentityCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IdentityCallerRaw struct {
	Contract *IdentityCaller // Generic read-only contract binding to access the raw methods on
}

// IdentityTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IdentityTransactorRaw struct {
	Contract *IdentityTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIdentity creates a new instance of Identity, bound to a specific deployed contract.
func NewIdentity(address common.Address, backend bind.ContractBackend) (*Identity, error) {
	contract, err := bindIdentity(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Identity{Address: &address, IdentityCaller: IdentityCaller{contract: contract}, IdentityTransactor: IdentityTransactor{contract: contract}, IdentityFilterer: IdentityFilterer{contract: contract}}, nil
}

// NewIdentityCaller creates a new read-only instance of Identity, bound to a specific deployed contract.
func NewIdentityCaller(address common.Address, caller bind.ContractCaller) (*IdentityCaller, error) {
	contract, err := bindIdentity(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IdentityCaller{contract: contract}, nil
}

// NewIdentityTransactor creates a new write-only instance of Identity, bound to a specific deployed contract.
func NewIdentityTransactor(address common.Address, transactor bind.ContractTransactor) (*IdentityTransactor, error) {
	contract, err := bindIdentity(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IdentityTransactor{contract: contract}, nil
}

// NewIdentityFilterer creates a new log filterer instance of Identity, bound to a specific deployed contract.
func NewIdentityFilterer(address common.Address, filterer bind.ContractFilterer) (*IdentityFilterer, error) {
	contract, err := bindIdentity(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IdentityFilterer{contract: contract}, nil
}

// bindIdentity binds a generic wrapper to an already deployed contract.
func bindIdentity(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IdentityABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Identity *IdentityRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Identity.Contract.IdentityCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Identity *IdentityRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Identity.Contract.IdentityTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Identity *IdentityRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Identity.Contract.IdentityTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Identity *IdentityCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Identity.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Identity *IdentityTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Identity.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Identity *IdentityTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Identity.Contract.contract.Transact(opts, method, params...)
}

// ACTIONKEY is a free data retrieval call binding the contract method 0x75e5598c.
//
// Solidity: function ACTION_KEY() constant returns(uint256)
func (_Identity *IdentityCaller) ACTIONKEY(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "ACTION_KEY")
	return *ret0, err
}

// ACTIONKEY is a free data retrieval call binding the contract method 0x75e5598c.
//
// Solidity: function ACTION_KEY() constant returns(uint256)
func (_Identity *IdentitySession) ACTIONKEY() (*big.Int, error) {
	return _Identity.Contract.ACTIONKEY(&_Identity.CallOpts)
}

// ACTIONKEY is a free data retrieval call binding the contract method 0x75e5598c.
//
// Solidity: function ACTION_KEY() constant returns(uint256)
func (_Identity *IdentityCallerSession) ACTIONKEY() (*big.Int, error) {
	return _Identity.Contract.ACTIONKEY(&_Identity.CallOpts)
}

// ASSISTKEY is a free data retrieval call binding the contract method 0xdbfa74b7.
//
// Solidity: function ASSIST_KEY() constant returns(uint256)
func (_Identity *IdentityCaller) ASSISTKEY(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "ASSIST_KEY")
	return *ret0, err
}

// ASSISTKEY is a free data retrieval call binding the contract method 0xdbfa74b7.
//
// Solidity: function ASSIST_KEY() constant returns(uint256)
func (_Identity *IdentitySession) ASSISTKEY() (*big.Int, error) {
	return _Identity.Contract.ASSISTKEY(&_Identity.CallOpts)
}

// ASSISTKEY is a free data retrieval call binding the contract method 0xdbfa74b7.
//
// Solidity: function ASSIST_KEY() constant returns(uint256)
func (_Identity *IdentityCallerSession) ASSISTKEY() (*big.Int, error) {
	return _Identity.Contract.ASSISTKEY(&_Identity.CallOpts)
}

// CLAIMSIGNERKEY is a free data retrieval call binding the contract method 0xc6702187.
//
// Solidity: function CLAIM_SIGNER_KEY() constant returns(uint256)
func (_Identity *IdentityCaller) CLAIMSIGNERKEY(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "CLAIM_SIGNER_KEY")
	return *ret0, err
}

// CLAIMSIGNERKEY is a free data retrieval call binding the contract method 0xc6702187.
//
// Solidity: function CLAIM_SIGNER_KEY() constant returns(uint256)
func (_Identity *IdentitySession) CLAIMSIGNERKEY() (*big.Int, error) {
	return _Identity.Contract.CLAIMSIGNERKEY(&_Identity.CallOpts)
}

// CLAIMSIGNERKEY is a free data retrieval call binding the contract method 0xc6702187.
//
// Solidity: function CLAIM_SIGNER_KEY() constant returns(uint256)
func (_Identity *IdentityCallerSession) CLAIMSIGNERKEY() (*big.Int, error) {
	return _Identity.Contract.CLAIMSIGNERKEY(&_Identity.CallOpts)
}

// CONTRACTSCHEME is a free data retrieval call binding the contract method 0x251de3e9.
//
// Solidity: function CONTRACT_SCHEME() constant returns(uint256)
func (_Identity *IdentityCaller) CONTRACTSCHEME(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "CONTRACT_SCHEME")
	return *ret0, err
}

// CONTRACTSCHEME is a free data retrieval call binding the contract method 0x251de3e9.
//
// Solidity: function CONTRACT_SCHEME() constant returns(uint256)
func (_Identity *IdentitySession) CONTRACTSCHEME() (*big.Int, error) {
	return _Identity.Contract.CONTRACTSCHEME(&_Identity.CallOpts)
}

// CONTRACTSCHEME is a free data retrieval call binding the contract method 0x251de3e9.
//
// Solidity: function CONTRACT_SCHEME() constant returns(uint256)
func (_Identity *IdentityCallerSession) CONTRACTSCHEME() (*big.Int, error) {
	return _Identity.Contract.CONTRACTSCHEME(&_Identity.CallOpts)
}

// CUSTOMKEY is a free data retrieval call binding the contract method 0xb132734e.
//
// Solidity: function CUSTOM_KEY() constant returns(uint256)
func (_Identity *IdentityCaller) CUSTOMKEY(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "CUSTOM_KEY")
	return *ret0, err
}

// CUSTOMKEY is a free data retrieval call binding the contract method 0xb132734e.
//
// Solidity: function CUSTOM_KEY() constant returns(uint256)
func (_Identity *IdentitySession) CUSTOMKEY() (*big.Int, error) {
	return _Identity.Contract.CUSTOMKEY(&_Identity.CallOpts)
}

// CUSTOMKEY is a free data retrieval call binding the contract method 0xb132734e.
//
// Solidity: function CUSTOM_KEY() constant returns(uint256)
func (_Identity *IdentityCallerSession) CUSTOMKEY() (*big.Int, error) {
	return _Identity.Contract.CUSTOMKEY(&_Identity.CallOpts)
}

// DELEGATEKEY is a free data retrieval call binding the contract method 0xead09fab.
//
// Solidity: function DELEGATE_KEY() constant returns(uint256)
func (_Identity *IdentityCaller) DELEGATEKEY(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "DELEGATE_KEY")
	return *ret0, err
}

// DELEGATEKEY is a free data retrieval call binding the contract method 0xead09fab.
//
// Solidity: function DELEGATE_KEY() constant returns(uint256)
func (_Identity *IdentitySession) DELEGATEKEY() (*big.Int, error) {
	return _Identity.Contract.DELEGATEKEY(&_Identity.CallOpts)
}

// DELEGATEKEY is a free data retrieval call binding the contract method 0xead09fab.
//
// Solidity: function DELEGATE_KEY() constant returns(uint256)
func (_Identity *IdentityCallerSession) DELEGATEKEY() (*big.Int, error) {
	return _Identity.Contract.DELEGATEKEY(&_Identity.CallOpts)
}

// ECDSASCHEME is a free data retrieval call binding the contract method 0x82d09446.
//
// Solidity: function ECDSA_SCHEME() constant returns(uint256)
func (_Identity *IdentityCaller) ECDSASCHEME(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "ECDSA_SCHEME")
	return *ret0, err
}

// ECDSASCHEME is a free data retrieval call binding the contract method 0x82d09446.
//
// Solidity: function ECDSA_SCHEME() constant returns(uint256)
func (_Identity *IdentitySession) ECDSASCHEME() (*big.Int, error) {
	return _Identity.Contract.ECDSASCHEME(&_Identity.CallOpts)
}

// ECDSASCHEME is a free data retrieval call binding the contract method 0x82d09446.
//
// Solidity: function ECDSA_SCHEME() constant returns(uint256)
func (_Identity *IdentityCallerSession) ECDSASCHEME() (*big.Int, error) {
	return _Identity.Contract.ECDSASCHEME(&_Identity.CallOpts)
}

// ECDSATYPE is a free data retrieval call binding the contract method 0x49991ec8.
//
// Solidity: function ECDSA_TYPE() constant returns(uint256)
func (_Identity *IdentityCaller) ECDSATYPE(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "ECDSA_TYPE")
	return *ret0, err
}

// ECDSATYPE is a free data retrieval call binding the contract method 0x49991ec8.
//
// Solidity: function ECDSA_TYPE() constant returns(uint256)
func (_Identity *IdentitySession) ECDSATYPE() (*big.Int, error) {
	return _Identity.Contract.ECDSATYPE(&_Identity.CallOpts)
}

// ECDSATYPE is a free data retrieval call binding the contract method 0x49991ec8.
//
// Solidity: function ECDSA_TYPE() constant returns(uint256)
func (_Identity *IdentityCallerSession) ECDSATYPE() (*big.Int, error) {
	return _Identity.Contract.ECDSATYPE(&_Identity.CallOpts)
}

// ENCRYPTIONKEY is a free data retrieval call binding the contract method 0x9e140cc8.
//
// Solidity: function ENCRYPTION_KEY() constant returns(uint256)
func (_Identity *IdentityCaller) ENCRYPTIONKEY(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "ENCRYPTION_KEY")
	return *ret0, err
}

// ENCRYPTIONKEY is a free data retrieval call binding the contract method 0x9e140cc8.
//
// Solidity: function ENCRYPTION_KEY() constant returns(uint256)
func (_Identity *IdentitySession) ENCRYPTIONKEY() (*big.Int, error) {
	return _Identity.Contract.ENCRYPTIONKEY(&_Identity.CallOpts)
}

// ENCRYPTIONKEY is a free data retrieval call binding the contract method 0x9e140cc8.
//
// Solidity: function ENCRYPTION_KEY() constant returns(uint256)
func (_Identity *IdentityCallerSession) ENCRYPTIONKEY() (*big.Int, error) {
	return _Identity.Contract.ENCRYPTIONKEY(&_Identity.CallOpts)
}

// ERC165ID is a free data retrieval call binding the contract method 0x02e7491e.
//
// Solidity: function ERC165ID() constant returns(bytes4)
func (_Identity *IdentityCaller) ERC165ID(opts *bind.CallOpts) ([4]byte, error) {
	var (
		ret0 = new([4]byte)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "ERC165ID")
	return *ret0, err
}

// ERC165ID is a free data retrieval call binding the contract method 0x02e7491e.
//
// Solidity: function ERC165ID() constant returns(bytes4)
func (_Identity *IdentitySession) ERC165ID() ([4]byte, error) {
	return _Identity.Contract.ERC165ID(&_Identity.CallOpts)
}

// ERC165ID is a free data retrieval call binding the contract method 0x02e7491e.
//
// Solidity: function ERC165ID() constant returns(bytes4)
func (_Identity *IdentityCallerSession) ERC165ID() ([4]byte, error) {
	return _Identity.Contract.ERC165ID(&_Identity.CallOpts)
}

// ERC725ID is a free data retrieval call binding the contract method 0x7d96fa58.
//
// Solidity: function ERC725ID() constant returns(bytes4)
func (_Identity *IdentityCaller) ERC725ID(opts *bind.CallOpts) ([4]byte, error) {
	var (
		ret0 = new([4]byte)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "ERC725ID")
	return *ret0, err
}

// ERC725ID is a free data retrieval call binding the contract method 0x7d96fa58.
//
// Solidity: function ERC725ID() constant returns(bytes4)
func (_Identity *IdentitySession) ERC725ID() ([4]byte, error) {
	return _Identity.Contract.ERC725ID(&_Identity.CallOpts)
}

// ERC725ID is a free data retrieval call binding the contract method 0x7d96fa58.
//
// Solidity: function ERC725ID() constant returns(bytes4)
func (_Identity *IdentityCallerSession) ERC725ID() ([4]byte, error) {
	return _Identity.Contract.ERC725ID(&_Identity.CallOpts)
}

// ERC735ID is a free data retrieval call binding the contract method 0xbf2f20ad.
//
// Solidity: function ERC735ID() constant returns(bytes4)
func (_Identity *IdentityCaller) ERC735ID(opts *bind.CallOpts) ([4]byte, error) {
	var (
		ret0 = new([4]byte)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "ERC735ID")
	return *ret0, err
}

// ERC735ID is a free data retrieval call binding the contract method 0xbf2f20ad.
//
// Solidity: function ERC735ID() constant returns(bytes4)
func (_Identity *IdentitySession) ERC735ID() ([4]byte, error) {
	return _Identity.Contract.ERC735ID(&_Identity.CallOpts)
}

// ERC735ID is a free data retrieval call binding the contract method 0xbf2f20ad.
//
// Solidity: function ERC735ID() constant returns(bytes4)
func (_Identity *IdentityCallerSession) ERC735ID() ([4]byte, error) {
	return _Identity.Contract.ERC735ID(&_Identity.CallOpts)
}

// LABELTOPIC is a free data retrieval call binding the contract method 0xb1e9f64c.
//
// Solidity: function LABEL_TOPIC() constant returns(uint256)
func (_Identity *IdentityCaller) LABELTOPIC(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "LABEL_TOPIC")
	return *ret0, err
}

// LABELTOPIC is a free data retrieval call binding the contract method 0xb1e9f64c.
//
// Solidity: function LABEL_TOPIC() constant returns(uint256)
func (_Identity *IdentitySession) LABELTOPIC() (*big.Int, error) {
	return _Identity.Contract.LABELTOPIC(&_Identity.CallOpts)
}

// LABELTOPIC is a free data retrieval call binding the contract method 0xb1e9f64c.
//
// Solidity: function LABEL_TOPIC() constant returns(uint256)
func (_Identity *IdentityCallerSession) LABELTOPIC() (*big.Int, error) {
	return _Identity.Contract.LABELTOPIC(&_Identity.CallOpts)
}

// MANAGEMENTKEY is a free data retrieval call binding the contract method 0x058b316c.
//
// Solidity: function MANAGEMENT_KEY() constant returns(uint256)
func (_Identity *IdentityCaller) MANAGEMENTKEY(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "MANAGEMENT_KEY")
	return *ret0, err
}

// MANAGEMENTKEY is a free data retrieval call binding the contract method 0x058b316c.
//
// Solidity: function MANAGEMENT_KEY() constant returns(uint256)
func (_Identity *IdentitySession) MANAGEMENTKEY() (*big.Int, error) {
	return _Identity.Contract.MANAGEMENTKEY(&_Identity.CallOpts)
}

// MANAGEMENTKEY is a free data retrieval call binding the contract method 0x058b316c.
//
// Solidity: function MANAGEMENT_KEY() constant returns(uint256)
func (_Identity *IdentityCallerSession) MANAGEMENTKEY() (*big.Int, error) {
	return _Identity.Contract.MANAGEMENTKEY(&_Identity.CallOpts)
}

// METAIDTOPIC is a free data retrieval call binding the contract method 0x710ca550.
//
// Solidity: function METAID_TOPIC() constant returns(uint256)
func (_Identity *IdentityCaller) METAIDTOPIC(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "METAID_TOPIC")
	return *ret0, err
}

// METAIDTOPIC is a free data retrieval call binding the contract method 0x710ca550.
//
// Solidity: function METAID_TOPIC() constant returns(uint256)
func (_Identity *IdentitySession) METAIDTOPIC() (*big.Int, error) {
	return _Identity.Contract.METAIDTOPIC(&_Identity.CallOpts)
}

// METAIDTOPIC is a free data retrieval call binding the contract method 0x710ca550.
//
// Solidity: function METAID_TOPIC() constant returns(uint256)
func (_Identity *IdentityCallerSession) METAIDTOPIC() (*big.Int, error) {
	return _Identity.Contract.METAIDTOPIC(&_Identity.CallOpts)
}

// PROFILETOPIC is a free data retrieval call binding the contract method 0xae628386.
//
// Solidity: function PROFILE_TOPIC() constant returns(uint256)
func (_Identity *IdentityCaller) PROFILETOPIC(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "PROFILE_TOPIC")
	return *ret0, err
}

// PROFILETOPIC is a free data retrieval call binding the contract method 0xae628386.
//
// Solidity: function PROFILE_TOPIC() constant returns(uint256)
func (_Identity *IdentitySession) PROFILETOPIC() (*big.Int, error) {
	return _Identity.Contract.PROFILETOPIC(&_Identity.CallOpts)
}

// PROFILETOPIC is a free data retrieval call binding the contract method 0xae628386.
//
// Solidity: function PROFILE_TOPIC() constant returns(uint256)
func (_Identity *IdentityCallerSession) PROFILETOPIC() (*big.Int, error) {
	return _Identity.Contract.PROFILETOPIC(&_Identity.CallOpts)
}

// REGISTRYTOPIC is a free data retrieval call binding the contract method 0x0440b43a.
//
// Solidity: function REGISTRY_TOPIC() constant returns(uint256)
func (_Identity *IdentityCaller) REGISTRYTOPIC(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "REGISTRY_TOPIC")
	return *ret0, err
}

// REGISTRYTOPIC is a free data retrieval call binding the contract method 0x0440b43a.
//
// Solidity: function REGISTRY_TOPIC() constant returns(uint256)
func (_Identity *IdentitySession) REGISTRYTOPIC() (*big.Int, error) {
	return _Identity.Contract.REGISTRYTOPIC(&_Identity.CallOpts)
}

// REGISTRYTOPIC is a free data retrieval call binding the contract method 0x0440b43a.
//
// Solidity: function REGISTRY_TOPIC() constant returns(uint256)
func (_Identity *IdentityCallerSession) REGISTRYTOPIC() (*big.Int, error) {
	return _Identity.Contract.REGISTRYTOPIC(&_Identity.CallOpts)
}

// RESIDENCETOPIC is a free data retrieval call binding the contract method 0xa550f0c7.
//
// Solidity: function RESIDENCE_TOPIC() constant returns(uint256)
func (_Identity *IdentityCaller) RESIDENCETOPIC(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "RESIDENCE_TOPIC")
	return *ret0, err
}

// RESIDENCETOPIC is a free data retrieval call binding the contract method 0xa550f0c7.
//
// Solidity: function RESIDENCE_TOPIC() constant returns(uint256)
func (_Identity *IdentitySession) RESIDENCETOPIC() (*big.Int, error) {
	return _Identity.Contract.RESIDENCETOPIC(&_Identity.CallOpts)
}

// RESIDENCETOPIC is a free data retrieval call binding the contract method 0xa550f0c7.
//
// Solidity: function RESIDENCE_TOPIC() constant returns(uint256)
func (_Identity *IdentityCallerSession) RESIDENCETOPIC() (*big.Int, error) {
	return _Identity.Contract.RESIDENCETOPIC(&_Identity.CallOpts)
}

// RESTOREKEY is a free data retrieval call binding the contract method 0xb9133d63.
//
// Solidity: function RESTORE_KEY() constant returns(uint256)
func (_Identity *IdentityCaller) RESTOREKEY(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "RESTORE_KEY")
	return *ret0, err
}

// RESTOREKEY is a free data retrieval call binding the contract method 0xb9133d63.
//
// Solidity: function RESTORE_KEY() constant returns(uint256)
func (_Identity *IdentitySession) RESTOREKEY() (*big.Int, error) {
	return _Identity.Contract.RESTOREKEY(&_Identity.CallOpts)
}

// RESTOREKEY is a free data retrieval call binding the contract method 0xb9133d63.
//
// Solidity: function RESTORE_KEY() constant returns(uint256)
func (_Identity *IdentityCallerSession) RESTOREKEY() (*big.Int, error) {
	return _Identity.Contract.RESTOREKEY(&_Identity.CallOpts)
}

// RSASCHEME is a free data retrieval call binding the contract method 0xf22d08a6.
//
// Solidity: function RSA_SCHEME() constant returns(uint256)
func (_Identity *IdentityCaller) RSASCHEME(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "RSA_SCHEME")
	return *ret0, err
}

// RSASCHEME is a free data retrieval call binding the contract method 0xf22d08a6.
//
// Solidity: function RSA_SCHEME() constant returns(uint256)
func (_Identity *IdentitySession) RSASCHEME() (*big.Int, error) {
	return _Identity.Contract.RSASCHEME(&_Identity.CallOpts)
}

// RSASCHEME is a free data retrieval call binding the contract method 0xf22d08a6.
//
// Solidity: function RSA_SCHEME() constant returns(uint256)
func (_Identity *IdentityCallerSession) RSASCHEME() (*big.Int, error) {
	return _Identity.Contract.RSASCHEME(&_Identity.CallOpts)
}

// RSATYPE is a free data retrieval call binding the contract method 0x2d32d442.
//
// Solidity: function RSA_TYPE() constant returns(uint256)
func (_Identity *IdentityCaller) RSATYPE(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "RSA_TYPE")
	return *ret0, err
}

// RSATYPE is a free data retrieval call binding the contract method 0x2d32d442.
//
// Solidity: function RSA_TYPE() constant returns(uint256)
func (_Identity *IdentitySession) RSATYPE() (*big.Int, error) {
	return _Identity.Contract.RSATYPE(&_Identity.CallOpts)
}

// RSATYPE is a free data retrieval call binding the contract method 0x2d32d442.
//
// Solidity: function RSA_TYPE() constant returns(uint256)
func (_Identity *IdentityCallerSession) RSATYPE() (*big.Int, error) {
	return _Identity.Contract.RSATYPE(&_Identity.CallOpts)
}

// ActionThreshold is a free data retrieval call binding the contract method 0x38f4edd4.
//
// Solidity: function actionThreshold() constant returns(uint256)
func (_Identity *IdentityCaller) ActionThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "actionThreshold")
	return *ret0, err
}

// ActionThreshold is a free data retrieval call binding the contract method 0x38f4edd4.
//
// Solidity: function actionThreshold() constant returns(uint256)
func (_Identity *IdentitySession) ActionThreshold() (*big.Int, error) {
	return _Identity.Contract.ActionThreshold(&_Identity.CallOpts)
}

// ActionThreshold is a free data retrieval call binding the contract method 0x38f4edd4.
//
// Solidity: function actionThreshold() constant returns(uint256)
func (_Identity *IdentityCallerSession) ActionThreshold() (*big.Int, error) {
	return _Identity.Contract.ActionThreshold(&_Identity.CallOpts)
}

// AddrToKey is a free data retrieval call binding the contract method 0x63f14c3c.
//
// Solidity: function addrToKey(addr address) constant returns(bytes32)
func (_Identity *IdentityCaller) AddrToKey(opts *bind.CallOpts, addr common.Address) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "addrToKey", addr)
	return *ret0, err
}

// AddrToKey is a free data retrieval call binding the contract method 0x63f14c3c.
//
// Solidity: function addrToKey(addr address) constant returns(bytes32)
func (_Identity *IdentitySession) AddrToKey(addr common.Address) ([32]byte, error) {
	return _Identity.Contract.AddrToKey(&_Identity.CallOpts, addr)
}

// AddrToKey is a free data retrieval call binding the contract method 0x63f14c3c.
//
// Solidity: function addrToKey(addr address) constant returns(bytes32)
func (_Identity *IdentityCallerSession) AddrToKey(addr common.Address) ([32]byte, error) {
	return _Identity.Contract.AddrToKey(&_Identity.CallOpts, addr)
}

// Approved is a free data retrieval call binding the contract method 0x6e4c4311.
//
// Solidity: function approved( uint256,  uint256) constant returns(address)
func (_Identity *IdentityCaller) Approved(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "approved", arg0, arg1)
	return *ret0, err
}

// Approved is a free data retrieval call binding the contract method 0x6e4c4311.
//
// Solidity: function approved( uint256,  uint256) constant returns(address)
func (_Identity *IdentitySession) Approved(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _Identity.Contract.Approved(&_Identity.CallOpts, arg0, arg1)
}

// Approved is a free data retrieval call binding the contract method 0x6e4c4311.
//
// Solidity: function approved( uint256,  uint256) constant returns(address)
func (_Identity *IdentityCallerSession) Approved(arg0 *big.Int, arg1 *big.Int) (common.Address, error) {
	return _Identity.Contract.Approved(&_Identity.CallOpts, arg0, arg1)
}

// ClaimToSign is a free data retrieval call binding the contract method 0x1d203be8.
//
// Solidity: function claimToSign(subject address, topic uint256, data bytes) constant returns(bytes32)
func (_Identity *IdentityCaller) ClaimToSign(opts *bind.CallOpts, subject common.Address, topic *big.Int, data []byte) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "claimToSign", subject, topic, data)
	return *ret0, err
}

// ClaimToSign is a free data retrieval call binding the contract method 0x1d203be8.
//
// Solidity: function claimToSign(subject address, topic uint256, data bytes) constant returns(bytes32)
func (_Identity *IdentitySession) ClaimToSign(subject common.Address, topic *big.Int, data []byte) ([32]byte, error) {
	return _Identity.Contract.ClaimToSign(&_Identity.CallOpts, subject, topic, data)
}

// ClaimToSign is a free data retrieval call binding the contract method 0x1d203be8.
//
// Solidity: function claimToSign(subject address, topic uint256, data bytes) constant returns(bytes32)
func (_Identity *IdentityCallerSession) ClaimToSign(subject common.Address, topic *big.Int, data []byte) ([32]byte, error) {
	return _Identity.Contract.ClaimToSign(&_Identity.CallOpts, subject, topic, data)
}

// Execution is a free data retrieval call binding the contract method 0x5dccebba.
//
// Solidity: function execution( uint256) constant returns(to address, value uint256, data bytes, needsApprove uint256)
func (_Identity *IdentityCaller) Execution(opts *bind.CallOpts, arg0 *big.Int) (struct {
	To           common.Address
	Value        *big.Int
	Data         []byte
	NeedsApprove *big.Int
}, error) {
	ret := new(struct {
		To           common.Address
		Value        *big.Int
		Data         []byte
		NeedsApprove *big.Int
	})
	out := ret
	err := _Identity.contract.Call(opts, out, "execution", arg0)
	return *ret, err
}

// Execution is a free data retrieval call binding the contract method 0x5dccebba.
//
// Solidity: function execution( uint256) constant returns(to address, value uint256, data bytes, needsApprove uint256)
func (_Identity *IdentitySession) Execution(arg0 *big.Int) (struct {
	To           common.Address
	Value        *big.Int
	Data         []byte
	NeedsApprove *big.Int
}, error) {
	return _Identity.Contract.Execution(&_Identity.CallOpts, arg0)
}

// Execution is a free data retrieval call binding the contract method 0x5dccebba.
//
// Solidity: function execution( uint256) constant returns(to address, value uint256, data bytes, needsApprove uint256)
func (_Identity *IdentityCallerSession) Execution(arg0 *big.Int) (struct {
	To           common.Address
	Value        *big.Int
	Data         []byte
	NeedsApprove *big.Int
}, error) {
	return _Identity.Contract.Execution(&_Identity.CallOpts, arg0)
}

// GetClaim is a free data retrieval call binding the contract method 0xc9100bcb.
//
// Solidity: function getClaim(_claimId bytes32) constant returns(topic uint256, scheme uint256, issuer address, signature bytes, data bytes, uri string)
func (_Identity *IdentityCaller) GetClaim(opts *bind.CallOpts, _claimId [32]byte) (struct {
	Topic     *big.Int
	Scheme    *big.Int
	Issuer    common.Address
	Signature []byte
	Data      []byte
	Uri       string
}, error) {
	ret := new(struct {
		Topic     *big.Int
		Scheme    *big.Int
		Issuer    common.Address
		Signature []byte
		Data      []byte
		Uri       string
	})
	out := ret
	err := _Identity.contract.Call(opts, out, "getClaim", _claimId)
	return *ret, err
}

// GetClaim is a free data retrieval call binding the contract method 0xc9100bcb.
//
// Solidity: function getClaim(_claimId bytes32) constant returns(topic uint256, scheme uint256, issuer address, signature bytes, data bytes, uri string)
func (_Identity *IdentitySession) GetClaim(_claimId [32]byte) (struct {
	Topic     *big.Int
	Scheme    *big.Int
	Issuer    common.Address
	Signature []byte
	Data      []byte
	Uri       string
}, error) {
	return _Identity.Contract.GetClaim(&_Identity.CallOpts, _claimId)
}

// GetClaim is a free data retrieval call binding the contract method 0xc9100bcb.
//
// Solidity: function getClaim(_claimId bytes32) constant returns(topic uint256, scheme uint256, issuer address, signature bytes, data bytes, uri string)
func (_Identity *IdentityCallerSession) GetClaim(_claimId [32]byte) (struct {
	Topic     *big.Int
	Scheme    *big.Int
	Issuer    common.Address
	Signature []byte
	Data      []byte
	Uri       string
}, error) {
	return _Identity.Contract.GetClaim(&_Identity.CallOpts, _claimId)
}

// GetClaimId is a free data retrieval call binding the contract method 0x190db862.
//
// Solidity: function getClaimId(issuer address, topic uint256) constant returns(bytes32)
func (_Identity *IdentityCaller) GetClaimId(opts *bind.CallOpts, issuer common.Address, topic *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "getClaimId", issuer, topic)
	return *ret0, err
}

// GetClaimId is a free data retrieval call binding the contract method 0x190db862.
//
// Solidity: function getClaimId(issuer address, topic uint256) constant returns(bytes32)
func (_Identity *IdentitySession) GetClaimId(issuer common.Address, topic *big.Int) ([32]byte, error) {
	return _Identity.Contract.GetClaimId(&_Identity.CallOpts, issuer, topic)
}

// GetClaimId is a free data retrieval call binding the contract method 0x190db862.
//
// Solidity: function getClaimId(issuer address, topic uint256) constant returns(bytes32)
func (_Identity *IdentityCallerSession) GetClaimId(issuer common.Address, topic *big.Int) ([32]byte, error) {
	return _Identity.Contract.GetClaimId(&_Identity.CallOpts, issuer, topic)
}

// GetClaimIdsByType is a free data retrieval call binding the contract method 0x262b54f5.
//
// Solidity: function getClaimIdsByType(_topic uint256) constant returns(claimIds bytes32[])
func (_Identity *IdentityCaller) GetClaimIdsByType(opts *bind.CallOpts, _topic *big.Int) ([][32]byte, error) {
	var (
		ret0 = new([][32]byte)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "getClaimIdsByType", _topic)
	return *ret0, err
}

// GetClaimIdsByType is a free data retrieval call binding the contract method 0x262b54f5.
//
// Solidity: function getClaimIdsByType(_topic uint256) constant returns(claimIds bytes32[])
func (_Identity *IdentitySession) GetClaimIdsByType(_topic *big.Int) ([][32]byte, error) {
	return _Identity.Contract.GetClaimIdsByType(&_Identity.CallOpts, _topic)
}

// GetClaimIdsByType is a free data retrieval call binding the contract method 0x262b54f5.
//
// Solidity: function getClaimIdsByType(_topic uint256) constant returns(claimIds bytes32[])
func (_Identity *IdentityCallerSession) GetClaimIdsByType(_topic *big.Int) ([][32]byte, error) {
	return _Identity.Contract.GetClaimIdsByType(&_Identity.CallOpts, _topic)
}

// GetFunctionSignature is a free data retrieval call binding the contract method 0xc32b3518.
//
// Solidity: function getFunctionSignature(b bytes) constant returns(bytes4)
func (_Identity *IdentityCaller) GetFunctionSignature(opts *bind.CallOpts, b []byte) ([4]byte, error) {
	var (
		ret0 = new([4]byte)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "getFunctionSignature", b)
	return *ret0, err
}

// GetFunctionSignature is a free data retrieval call binding the contract method 0xc32b3518.
//
// Solidity: function getFunctionSignature(b bytes) constant returns(bytes4)
func (_Identity *IdentitySession) GetFunctionSignature(b []byte) ([4]byte, error) {
	return _Identity.Contract.GetFunctionSignature(&_Identity.CallOpts, b)
}

// GetFunctionSignature is a free data retrieval call binding the contract method 0xc32b3518.
//
// Solidity: function getFunctionSignature(b bytes) constant returns(bytes4)
func (_Identity *IdentityCallerSession) GetFunctionSignature(b []byte) ([4]byte, error) {
	return _Identity.Contract.GetFunctionSignature(&_Identity.CallOpts, b)
}

// GetKey is a free data retrieval call binding the contract method 0x12aaac70.
//
// Solidity: function getKey(_key bytes32) constant returns(purposes uint256[], keyType uint256, key bytes32)
func (_Identity *IdentityCaller) GetKey(opts *bind.CallOpts, _key [32]byte) (
	// struct {
	// Purposes []*big.Int
	// KeyType  *big.Int
	// Key      [32]byte
	// }
	metaIDKey, error) {
	ret := new(metaIDKey)
	// 	struct {
	// 	Purposes []*big.Int
	// 	KeyType  *big.Int
	// 	Key      [32]byte
	// }
	//	)
	out := ret
	err := _Identity.contract.Call(opts, out, "getKey", _key)
	return *ret, err
}

// GetKey is a free data retrieval call binding the contract method 0x12aaac70.
//
// Solidity: function getKey(_key bytes32) constant returns(purposes uint256[], keyType uint256, key bytes32)
func (_Identity *IdentitySession) GetKey(_key [32]byte) (struct {
	Purposes []*big.Int
	KeyType  *big.Int
	Key      [32]byte
}, error) {
	return _Identity.Contract.GetKey(&_Identity.CallOpts, _key)
}

// GetKey is a free data retrieval call binding the contract method 0x12aaac70.
//
// Solidity: function getKey(_key bytes32) constant returns(purposes uint256[], keyType uint256, key bytes32)
func (_Identity *IdentityCallerSession) GetKey(_key [32]byte) (struct {
	Purposes []*big.Int
	KeyType  *big.Int
	Key      [32]byte
}, error) {
	return _Identity.Contract.GetKey(&_Identity.CallOpts, _key)
}

// GetKeysByPurpose is a free data retrieval call binding the contract method 0x9010f726.
//
// Solidity: function getKeysByPurpose(_purpose uint256) constant returns(keys bytes32[])
func (_Identity *IdentityCaller) GetKeysByPurpose(opts *bind.CallOpts, _purpose *big.Int) ([][32]byte, error) {
	var (
		ret0 = new([][32]byte)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "getKeysByPurpose", _purpose)
	return *ret0, err
}

// GetKeysByPurpose is a free data retrieval call binding the contract method 0x9010f726.
//
// Solidity: function getKeysByPurpose(_purpose uint256) constant returns(keys bytes32[])
func (_Identity *IdentitySession) GetKeysByPurpose(_purpose *big.Int) ([][32]byte, error) {
	return _Identity.Contract.GetKeysByPurpose(&_Identity.CallOpts, _purpose)
}

// GetKeysByPurpose is a free data retrieval call binding the contract method 0x9010f726.
//
// Solidity: function getKeysByPurpose(_purpose uint256) constant returns(keys bytes32[])
func (_Identity *IdentityCallerSession) GetKeysByPurpose(_purpose *big.Int) ([][32]byte, error) {
	return _Identity.Contract.GetKeysByPurpose(&_Identity.CallOpts, _purpose)
}

// GetSignatureAddress is a free data retrieval call binding the contract method 0x3b8a12c8.
//
// Solidity: function getSignatureAddress(toSign bytes32, signature bytes) constant returns(address)
func (_Identity *IdentityCaller) GetSignatureAddress(opts *bind.CallOpts, toSign [32]byte, signature []byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "getSignatureAddress", toSign, signature)
	return *ret0, err
}

// GetSignatureAddress is a free data retrieval call binding the contract method 0x3b8a12c8.
//
// Solidity: function getSignatureAddress(toSign bytes32, signature bytes) constant returns(address)
func (_Identity *IdentitySession) GetSignatureAddress(toSign [32]byte, signature []byte) (common.Address, error) {
	return _Identity.Contract.GetSignatureAddress(&_Identity.CallOpts, toSign, signature)
}

// GetSignatureAddress is a free data retrieval call binding the contract method 0x3b8a12c8.
//
// Solidity: function getSignatureAddress(toSign bytes32, signature bytes) constant returns(address)
func (_Identity *IdentityCallerSession) GetSignatureAddress(toSign [32]byte, signature []byte) (common.Address, error) {
	return _Identity.Contract.GetSignatureAddress(&_Identity.CallOpts, toSign, signature)
}

// GetTransactionCount is a free data retrieval call binding the contract method 0x2e7700f0.
//
// Solidity: function getTransactionCount() constant returns(uint256)
func (_Identity *IdentityCaller) GetTransactionCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "getTransactionCount")
	return *ret0, err
}

// GetTransactionCount is a free data retrieval call binding the contract method 0x2e7700f0.
//
// Solidity: function getTransactionCount() constant returns(uint256)
func (_Identity *IdentitySession) GetTransactionCount() (*big.Int, error) {
	return _Identity.Contract.GetTransactionCount(&_Identity.CallOpts)
}

// GetTransactionCount is a free data retrieval call binding the contract method 0x2e7700f0.
//
// Solidity: function getTransactionCount() constant returns(uint256)
func (_Identity *IdentityCallerSession) GetTransactionCount() (*big.Int, error) {
	return _Identity.Contract.GetTransactionCount(&_Identity.CallOpts)
}

// KeyCanExecute is a free data retrieval call binding the contract method 0x765b3042.
//
// Solidity: function keyCanExecute(_key bytes32, _to address, _func bytes4) constant returns(executable bool)
func (_Identity *IdentityCaller) KeyCanExecute(opts *bind.CallOpts, _key [32]byte, _to common.Address, _func [4]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "keyCanExecute", _key, _to, _func)
	return *ret0, err
}

// KeyCanExecute is a free data retrieval call binding the contract method 0x765b3042.
//
// Solidity: function keyCanExecute(_key bytes32, _to address, _func bytes4) constant returns(executable bool)
func (_Identity *IdentitySession) KeyCanExecute(_key [32]byte, _to common.Address, _func [4]byte) (bool, error) {
	return _Identity.Contract.KeyCanExecute(&_Identity.CallOpts, _key, _to, _func)
}

// KeyCanExecute is a free data retrieval call binding the contract method 0x765b3042.
//
// Solidity: function keyCanExecute(_key bytes32, _to address, _func bytes4) constant returns(executable bool)
func (_Identity *IdentityCallerSession) KeyCanExecute(_key [32]byte, _to common.Address, _func [4]byte) (bool, error) {
	return _Identity.Contract.KeyCanExecute(&_Identity.CallOpts, _key, _to, _func)
}

// KeyHasPurpose is a free data retrieval call binding the contract method 0xd202158d.
//
// Solidity: function keyHasPurpose(_key bytes32, purpose uint256) constant returns(exists bool)
func (_Identity *IdentityCaller) KeyHasPurpose(opts *bind.CallOpts, _key [32]byte, purpose *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "keyHasPurpose", _key, purpose)
	return *ret0, err
}

// KeyHasPurpose is a free data retrieval call binding the contract method 0xd202158d.
//
// Solidity: function keyHasPurpose(_key bytes32, purpose uint256) constant returns(exists bool)
func (_Identity *IdentitySession) KeyHasPurpose(_key [32]byte, purpose *big.Int) (bool, error) {
	return _Identity.Contract.KeyHasPurpose(&_Identity.CallOpts, _key, purpose)
}

// KeyHasPurpose is a free data retrieval call binding the contract method 0xd202158d.
//
// Solidity: function keyHasPurpose(_key bytes32, purpose uint256) constant returns(exists bool)
func (_Identity *IdentityCallerSession) KeyHasPurpose(_key [32]byte, purpose *big.Int) (bool, error) {
	return _Identity.Contract.KeyHasPurpose(&_Identity.CallOpts, _key, purpose)
}

// ManagementThreshold is a free data retrieval call binding the contract method 0xaa0a5142.
//
// Solidity: function managementThreshold() constant returns(uint256)
func (_Identity *IdentityCaller) ManagementThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "managementThreshold")
	return *ret0, err
}

// ManagementThreshold is a free data retrieval call binding the contract method 0xaa0a5142.
//
// Solidity: function managementThreshold() constant returns(uint256)
func (_Identity *IdentitySession) ManagementThreshold() (*big.Int, error) {
	return _Identity.Contract.ManagementThreshold(&_Identity.CallOpts)
}

// ManagementThreshold is a free data retrieval call binding the contract method 0xaa0a5142.
//
// Solidity: function managementThreshold() constant returns(uint256)
func (_Identity *IdentityCallerSession) ManagementThreshold() (*big.Int, error) {
	return _Identity.Contract.ManagementThreshold(&_Identity.CallOpts)
}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() constant returns(uint256)
func (_Identity *IdentityCaller) Nonce(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "nonce")
	return *ret0, err
}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() constant returns(uint256)
func (_Identity *IdentitySession) Nonce() (*big.Int, error) {
	return _Identity.Contract.Nonce(&_Identity.CallOpts)
}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() constant returns(uint256)
func (_Identity *IdentityCallerSession) Nonce() (*big.Int, error) {
	return _Identity.Contract.Nonce(&_Identity.CallOpts)
}

// NumClaims is a free data retrieval call binding the contract method 0xfc0fc849.
//
// Solidity: function numClaims() constant returns(uint256)
func (_Identity *IdentityCaller) NumClaims(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "numClaims")
	return *ret0, err
}

// NumClaims is a free data retrieval call binding the contract method 0xfc0fc849.
//
// Solidity: function numClaims() constant returns(uint256)
func (_Identity *IdentitySession) NumClaims() (*big.Int, error) {
	return _Identity.Contract.NumClaims(&_Identity.CallOpts)
}

// NumClaims is a free data retrieval call binding the contract method 0xfc0fc849.
//
// Solidity: function numClaims() constant returns(uint256)
func (_Identity *IdentityCallerSession) NumClaims() (*big.Int, error) {
	return _Identity.Contract.NumClaims(&_Identity.CallOpts)
}

// NumKeys is a free data retrieval call binding the contract method 0xc9d24ecc.
//
// Solidity: function numKeys() constant returns(uint256)
func (_Identity *IdentityCaller) NumKeys(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "numKeys")
	return *ret0, err
}

// NumKeys is a free data retrieval call binding the contract method 0xc9d24ecc.
//
// Solidity: function numKeys() constant returns(uint256)
func (_Identity *IdentitySession) NumKeys() (*big.Int, error) {
	return _Identity.Contract.NumKeys(&_Identity.CallOpts)
}

// NumKeys is a free data retrieval call binding the contract method 0xc9d24ecc.
//
// Solidity: function numKeys() constant returns(uint256)
func (_Identity *IdentityCallerSession) NumKeys() (*big.Int, error) {
	return _Identity.Contract.NumKeys(&_Identity.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_Identity *IdentityCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "paused")
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_Identity *IdentitySession) Paused() (bool, error) {
	return _Identity.Contract.Paused(&_Identity.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_Identity *IdentityCallerSession) Paused() (bool, error) {
	return _Identity.Contract.Paused(&_Identity.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(interfaceID bytes4) constant returns(bool)
func (_Identity *IdentityCaller) SupportsInterface(opts *bind.CallOpts, interfaceID [4]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Identity.contract.Call(opts, out, "supportsInterface", interfaceID)
	return *ret0, err
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(interfaceID bytes4) constant returns(bool)
func (_Identity *IdentitySession) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _Identity.Contract.SupportsInterface(&_Identity.CallOpts, interfaceID)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(interfaceID bytes4) constant returns(bool)
func (_Identity *IdentityCallerSession) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _Identity.Contract.SupportsInterface(&_Identity.CallOpts, interfaceID)
}

// AddClaim is a paid mutator transaction binding the contract method 0xb1a34e0d.
//
// Solidity: function addClaim(_topic uint256, _scheme uint256, issuer address, _signature bytes, _data bytes, _uri string) returns(claimRequestId uint256)
func (_Identity *IdentityTransactor) AddClaim(opts *bind.TransactOpts, _topic *big.Int, _scheme *big.Int, issuer common.Address, _signature []byte, _data []byte, _uri string) (*types.Transaction, error) {
	return _Identity.contract.Transact(opts, "addClaim", _topic, _scheme, issuer, _signature, _data, _uri)
}

// AddClaim is a paid mutator transaction binding the contract method 0xb1a34e0d.
//
// Solidity: function addClaim(_topic uint256, _scheme uint256, issuer address, _signature bytes, _data bytes, _uri string) returns(claimRequestId uint256)
func (_Identity *IdentitySession) AddClaim(_topic *big.Int, _scheme *big.Int, issuer common.Address, _signature []byte, _data []byte, _uri string) (*types.Transaction, error) {
	return _Identity.Contract.AddClaim(&_Identity.TransactOpts, _topic, _scheme, issuer, _signature, _data, _uri)
}

// AddClaim is a paid mutator transaction binding the contract method 0xb1a34e0d.
//
// Solidity: function addClaim(_topic uint256, _scheme uint256, issuer address, _signature bytes, _data bytes, _uri string) returns(claimRequestId uint256)
func (_Identity *IdentityTransactorSession) AddClaim(_topic *big.Int, _scheme *big.Int, issuer common.Address, _signature []byte, _data []byte, _uri string) (*types.Transaction, error) {
	return _Identity.Contract.AddClaim(&_Identity.TransactOpts, _topic, _scheme, issuer, _signature, _data, _uri)
}

// AddClaimByProxy is a paid mutator transaction binding the contract method 0xe0610ba3.
//
// Solidity: function addClaimByProxy(_topic uint256, _scheme uint256, issuer address, _signature bytes, _data bytes, _uri string, _idSignature bytes) returns(claimRequestId uint256)
func (_Identity *IdentityTransactor) AddClaimByProxy(opts *bind.TransactOpts, _topic *big.Int, _scheme *big.Int, issuer common.Address, _signature []byte, _data []byte, _uri string, _idSignature []byte) (*types.Transaction, error) {
	return _Identity.contract.Transact(opts, "addClaimByProxy", _topic, _scheme, issuer, _signature, _data, _uri, _idSignature)
}

// AddClaimByProxy is a paid mutator transaction binding the contract method 0xe0610ba3.
//
// Solidity: function addClaimByProxy(_topic uint256, _scheme uint256, issuer address, _signature bytes, _data bytes, _uri string, _idSignature bytes) returns(claimRequestId uint256)
func (_Identity *IdentitySession) AddClaimByProxy(_topic *big.Int, _scheme *big.Int, issuer common.Address, _signature []byte, _data []byte, _uri string, _idSignature []byte) (*types.Transaction, error) {
	return _Identity.Contract.AddClaimByProxy(&_Identity.TransactOpts, _topic, _scheme, issuer, _signature, _data, _uri, _idSignature)
}

// AddClaimByProxy is a paid mutator transaction binding the contract method 0xe0610ba3.
//
// Solidity: function addClaimByProxy(_topic uint256, _scheme uint256, issuer address, _signature bytes, _data bytes, _uri string, _idSignature bytes) returns(claimRequestId uint256)
func (_Identity *IdentityTransactorSession) AddClaimByProxy(_topic *big.Int, _scheme *big.Int, issuer common.Address, _signature []byte, _data []byte, _uri string, _idSignature []byte) (*types.Transaction, error) {
	return _Identity.Contract.AddClaimByProxy(&_Identity.TransactOpts, _topic, _scheme, issuer, _signature, _data, _uri, _idSignature)
}

// AddKey is a paid mutator transaction binding the contract method 0x1d381240.
//
// Solidity: function addKey(_key bytes32, _purpose uint256, _keyType uint256) returns(success bool)
func (_Identity *IdentityTransactor) AddKey(opts *bind.TransactOpts, _key [32]byte, _purpose *big.Int, _keyType *big.Int) (*types.Transaction, error) {
	return _Identity.contract.Transact(opts, "addKey", _key, _purpose, _keyType)
}

// AddKey is a paid mutator transaction binding the contract method 0x1d381240.
//
// Solidity: function addKey(_key bytes32, _purpose uint256, _keyType uint256) returns(success bool)
func (_Identity *IdentitySession) AddKey(_key [32]byte, _purpose *big.Int, _keyType *big.Int) (*types.Transaction, error) {
	return _Identity.Contract.AddKey(&_Identity.TransactOpts, _key, _purpose, _keyType)
}

// AddKey is a paid mutator transaction binding the contract method 0x1d381240.
//
// Solidity: function addKey(_key bytes32, _purpose uint256, _keyType uint256) returns(success bool)
func (_Identity *IdentityTransactorSession) AddKey(_key [32]byte, _purpose *big.Int, _keyType *big.Int) (*types.Transaction, error) {
	return _Identity.Contract.AddKey(&_Identity.TransactOpts, _key, _purpose, _keyType)
}

// Approve is a paid mutator transaction binding the contract method 0x747442d3.
//
// Solidity: function approve(_id uint256, _approve bool) returns(success bool)
func (_Identity *IdentityTransactor) Approve(opts *bind.TransactOpts, _id *big.Int, _approve bool) (*types.Transaction, error) {
	return _Identity.contract.Transact(opts, "approve", _id, _approve)
}

// Approve is a paid mutator transaction binding the contract method 0x747442d3.
//
// Solidity: function approve(_id uint256, _approve bool) returns(success bool)
func (_Identity *IdentitySession) Approve(_id *big.Int, _approve bool) (*types.Transaction, error) {
	return _Identity.Contract.Approve(&_Identity.TransactOpts, _id, _approve)
}

// Approve is a paid mutator transaction binding the contract method 0x747442d3.
//
// Solidity: function approve(_id uint256, _approve bool) returns(success bool)
func (_Identity *IdentityTransactorSession) Approve(_id *big.Int, _approve bool) (*types.Transaction, error) {
	return _Identity.Contract.Approve(&_Identity.TransactOpts, _id, _approve)
}

// ChangeActionThreshold is a paid mutator transaction binding the contract method 0xe99896b8.
//
// Solidity: function changeActionThreshold(threshold uint256) returns()
func (_Identity *IdentityTransactor) ChangeActionThreshold(opts *bind.TransactOpts, threshold *big.Int) (*types.Transaction, error) {
	return _Identity.contract.Transact(opts, "changeActionThreshold", threshold)
}

// ChangeActionThreshold is a paid mutator transaction binding the contract method 0xe99896b8.
//
// Solidity: function changeActionThreshold(threshold uint256) returns()
func (_Identity *IdentitySession) ChangeActionThreshold(threshold *big.Int) (*types.Transaction, error) {
	return _Identity.Contract.ChangeActionThreshold(&_Identity.TransactOpts, threshold)
}

// ChangeActionThreshold is a paid mutator transaction binding the contract method 0xe99896b8.
//
// Solidity: function changeActionThreshold(threshold uint256) returns()
func (_Identity *IdentityTransactorSession) ChangeActionThreshold(threshold *big.Int) (*types.Transaction, error) {
	return _Identity.Contract.ChangeActionThreshold(&_Identity.TransactOpts, threshold)
}

// ChangeManagementThreshold is a paid mutator transaction binding the contract method 0xccfe5868.
//
// Solidity: function changeManagementThreshold(threshold uint256) returns()
func (_Identity *IdentityTransactor) ChangeManagementThreshold(opts *bind.TransactOpts, threshold *big.Int) (*types.Transaction, error) {
	return _Identity.contract.Transact(opts, "changeManagementThreshold", threshold)
}

// ChangeManagementThreshold is a paid mutator transaction binding the contract method 0xccfe5868.
//
// Solidity: function changeManagementThreshold(threshold uint256) returns()
func (_Identity *IdentitySession) ChangeManagementThreshold(threshold *big.Int) (*types.Transaction, error) {
	return _Identity.Contract.ChangeManagementThreshold(&_Identity.TransactOpts, threshold)
}

// ChangeManagementThreshold is a paid mutator transaction binding the contract method 0xccfe5868.
//
// Solidity: function changeManagementThreshold(threshold uint256) returns()
func (_Identity *IdentityTransactorSession) ChangeManagementThreshold(threshold *big.Int) (*types.Transaction, error) {
	return _Identity.Contract.ChangeManagementThreshold(&_Identity.TransactOpts, threshold)
}

// DelegatedExecute is a paid mutator transaction binding the contract method 0x4da34c2c.
//
// Solidity: function delegatedExecute(_to address, _value uint256, _data bytes, _nonce uint256, _sig bytes) returns(executionId uint256)
func (_Identity *IdentityTransactor) DelegatedExecute(opts *bind.TransactOpts, _to common.Address, _value *big.Int, _data []byte, _nonce *big.Int, _sig []byte) (*types.Transaction, error) {
	return _Identity.contract.Transact(opts, "delegatedExecute", _to, _value, _data, _nonce, _sig)
}

// DelegatedExecute is a paid mutator transaction binding the contract method 0x4da34c2c.
//
// Solidity: function delegatedExecute(_to address, _value uint256, _data bytes, _nonce uint256, _sig bytes) returns(executionId uint256)
func (_Identity *IdentitySession) DelegatedExecute(_to common.Address, _value *big.Int, _data []byte, _nonce *big.Int, _sig []byte) (*types.Transaction, error) {
	return _Identity.Contract.DelegatedExecute(&_Identity.TransactOpts, _to, _value, _data, _nonce, _sig)
}

// DelegatedExecute is a paid mutator transaction binding the contract method 0x4da34c2c.
//
// Solidity: function delegatedExecute(_to address, _value uint256, _data bytes, _nonce uint256, _sig bytes) returns(executionId uint256)
func (_Identity *IdentityTransactorSession) DelegatedExecute(_to common.Address, _value *big.Int, _data []byte, _nonce *big.Int, _sig []byte) (*types.Transaction, error) {
	return _Identity.Contract.DelegatedExecute(&_Identity.TransactOpts, _to, _value, _data, _nonce, _sig)
}

// DestroyAndSend is a paid mutator transaction binding the contract method 0xf5074f41.
//
// Solidity: function destroyAndSend(_recipient address) returns()
func (_Identity *IdentityTransactor) DestroyAndSend(opts *bind.TransactOpts, _recipient common.Address) (*types.Transaction, error) {
	return _Identity.contract.Transact(opts, "destroyAndSend", _recipient)
}

// DestroyAndSend is a paid mutator transaction binding the contract method 0xf5074f41.
//
// Solidity: function destroyAndSend(_recipient address) returns()
func (_Identity *IdentitySession) DestroyAndSend(_recipient common.Address) (*types.Transaction, error) {
	return _Identity.Contract.DestroyAndSend(&_Identity.TransactOpts, _recipient)
}

// DestroyAndSend is a paid mutator transaction binding the contract method 0xf5074f41.
//
// Solidity: function destroyAndSend(_recipient address) returns()
func (_Identity *IdentityTransactorSession) DestroyAndSend(_recipient common.Address) (*types.Transaction, error) {
	return _Identity.Contract.DestroyAndSend(&_Identity.TransactOpts, _recipient)
}

// Execute is a paid mutator transaction binding the contract method 0xb61d27f6.
//
// Solidity: function execute(_to address, _value uint256, _data bytes) returns(executionId uint256)
func (_Identity *IdentityTransactor) Execute(opts *bind.TransactOpts, _to common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _Identity.contract.Transact(opts, "execute", _to, _value, _data)
}

// Execute is a paid mutator transaction binding the contract method 0xb61d27f6.
//
// Solidity: function execute(_to address, _value uint256, _data bytes) returns(executionId uint256)
func (_Identity *IdentitySession) Execute(_to common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _Identity.Contract.Execute(&_Identity.TransactOpts, _to, _value, _data)
}

// Execute is a paid mutator transaction binding the contract method 0xb61d27f6.
//
// Solidity: function execute(_to address, _value uint256, _data bytes) returns(executionId uint256)
func (_Identity *IdentityTransactorSession) Execute(_to common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _Identity.Contract.Execute(&_Identity.TransactOpts, _to, _value, _data)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Identity *IdentityTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Identity.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Identity *IdentitySession) Pause() (*types.Transaction, error) {
	return _Identity.Contract.Pause(&_Identity.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Identity *IdentityTransactorSession) Pause() (*types.Transaction, error) {
	return _Identity.Contract.Pause(&_Identity.TransactOpts)
}

// RefreshClaim is a paid mutator transaction binding the contract method 0x5d7bc3fc.
//
// Solidity: function refreshClaim(_claimId bytes32) returns(bool)
func (_Identity *IdentityTransactor) RefreshClaim(opts *bind.TransactOpts, _claimId [32]byte) (*types.Transaction, error) {
	return _Identity.contract.Transact(opts, "refreshClaim", _claimId)
}

// RefreshClaim is a paid mutator transaction binding the contract method 0x5d7bc3fc.
//
// Solidity: function refreshClaim(_claimId bytes32) returns(bool)
func (_Identity *IdentitySession) RefreshClaim(_claimId [32]byte) (*types.Transaction, error) {
	return _Identity.Contract.RefreshClaim(&_Identity.TransactOpts, _claimId)
}

// RefreshClaim is a paid mutator transaction binding the contract method 0x5d7bc3fc.
//
// Solidity: function refreshClaim(_claimId bytes32) returns(bool)
func (_Identity *IdentityTransactorSession) RefreshClaim(_claimId [32]byte) (*types.Transaction, error) {
	return _Identity.Contract.RefreshClaim(&_Identity.TransactOpts, _claimId)
}

// RemoveClaim is a paid mutator transaction binding the contract method 0x4eee424a.
//
// Solidity: function removeClaim(_claimId bytes32) returns(success bool)
func (_Identity *IdentityTransactor) RemoveClaim(opts *bind.TransactOpts, _claimId [32]byte) (*types.Transaction, error) {
	return _Identity.contract.Transact(opts, "removeClaim", _claimId)
}

// RemoveClaim is a paid mutator transaction binding the contract method 0x4eee424a.
//
// Solidity: function removeClaim(_claimId bytes32) returns(success bool)
func (_Identity *IdentitySession) RemoveClaim(_claimId [32]byte) (*types.Transaction, error) {
	return _Identity.Contract.RemoveClaim(&_Identity.TransactOpts, _claimId)
}

// RemoveClaim is a paid mutator transaction binding the contract method 0x4eee424a.
//
// Solidity: function removeClaim(_claimId bytes32) returns(success bool)
func (_Identity *IdentityTransactorSession) RemoveClaim(_claimId [32]byte) (*types.Transaction, error) {
	return _Identity.Contract.RemoveClaim(&_Identity.TransactOpts, _claimId)
}

// RemoveKey is a paid mutator transaction binding the contract method 0x53d413c5.
//
// Solidity: function removeKey(_key bytes32, _purpose uint256) returns(success bool)
func (_Identity *IdentityTransactor) RemoveKey(opts *bind.TransactOpts, _key [32]byte, _purpose *big.Int) (*types.Transaction, error) {
	return _Identity.contract.Transact(opts, "removeKey", _key, _purpose)
}

// RemoveKey is a paid mutator transaction binding the contract method 0x53d413c5.
//
// Solidity: function removeKey(_key bytes32, _purpose uint256) returns(success bool)
func (_Identity *IdentitySession) RemoveKey(_key [32]byte, _purpose *big.Int) (*types.Transaction, error) {
	return _Identity.Contract.RemoveKey(&_Identity.TransactOpts, _key, _purpose)
}

// RemoveKey is a paid mutator transaction binding the contract method 0x53d413c5.
//
// Solidity: function removeKey(_key bytes32, _purpose uint256) returns(success bool)
func (_Identity *IdentityTransactorSession) RemoveKey(_key [32]byte, _purpose *big.Int) (*types.Transaction, error) {
	return _Identity.Contract.RemoveKey(&_Identity.TransactOpts, _key, _purpose)
}

// SetFunc is a paid mutator transaction binding the contract method 0x724a4b3b.
//
// Solidity: function setFunc(_key bytes32, _to address, _func bytes4, _executable bool) returns(success bool)
func (_Identity *IdentityTransactor) SetFunc(opts *bind.TransactOpts, _key [32]byte, _to common.Address, _func [4]byte, _executable bool) (*types.Transaction, error) {
	return _Identity.contract.Transact(opts, "setFunc", _key, _to, _func, _executable)
}

// SetFunc is a paid mutator transaction binding the contract method 0x724a4b3b.
//
// Solidity: function setFunc(_key bytes32, _to address, _func bytes4, _executable bool) returns(success bool)
func (_Identity *IdentitySession) SetFunc(_key [32]byte, _to common.Address, _func [4]byte, _executable bool) (*types.Transaction, error) {
	return _Identity.Contract.SetFunc(&_Identity.TransactOpts, _key, _to, _func, _executable)
}

// SetFunc is a paid mutator transaction binding the contract method 0x724a4b3b.
//
// Solidity: function setFunc(_key bytes32, _to address, _func bytes4, _executable bool) returns(success bool)
func (_Identity *IdentityTransactorSession) SetFunc(_key [32]byte, _to common.Address, _func [4]byte, _executable bool) (*types.Transaction, error) {
	return _Identity.Contract.SetFunc(&_Identity.TransactOpts, _key, _to, _func, _executable)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Identity *IdentityTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Identity.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Identity *IdentitySession) Unpause() (*types.Transaction, error) {
	return _Identity.Contract.Unpause(&_Identity.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Identity *IdentityTransactorSession) Unpause() (*types.Transaction, error) {
	return _Identity.Contract.Unpause(&_Identity.TransactOpts)
}

// IdentityApprovedIterator is returned from FilterApproved and is used to iterate over the raw logs and unpacked data for Approved events raised by the Identity contract.
type IdentityApprovedIterator struct {
	Event *IdentityApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IdentityApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IdentityApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IdentityApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IdentityApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IdentityApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IdentityApproved represents a Approved event raised by the Identity contract.
type IdentityApproved struct {
	ExecutionId *big.Int
	Approved    bool
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterApproved is a free log retrieval operation binding the contract event 0xb3932da477fe5d6c8ff2eafef050c0f3a1af18fc07121001482600f36f3715d8.
//
// Solidity: e Approved(executionId indexed uint256, approved bool)
func (_Identity *IdentityFilterer) FilterApproved(opts *bind.FilterOpts, executionId []*big.Int) (*IdentityApprovedIterator, error) {

	var executionIdRule []interface{}
	for _, executionIdItem := range executionId {
		executionIdRule = append(executionIdRule, executionIdItem)
	}

	logs, sub, err := _Identity.contract.FilterLogs(opts, "Approved", executionIdRule)
	if err != nil {
		return nil, err
	}
	return &IdentityApprovedIterator{contract: _Identity.contract, event: "Approved", logs: logs, sub: sub}, nil
}

// WatchApproved is a free log subscription operation binding the contract event 0xb3932da477fe5d6c8ff2eafef050c0f3a1af18fc07121001482600f36f3715d8.
//
// Solidity: e Approved(executionId indexed uint256, approved bool)
func (_Identity *IdentityFilterer) WatchApproved(opts *bind.WatchOpts, sink chan<- *IdentityApproved, executionId []*big.Int) (event.Subscription, error) {

	var executionIdRule []interface{}
	for _, executionIdItem := range executionId {
		executionIdRule = append(executionIdRule, executionIdItem)
	}

	logs, sub, err := _Identity.contract.WatchLogs(opts, "Approved", executionIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IdentityApproved)
				if err := _Identity.contract.UnpackLog(event, "Approved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IdentityClaimAddedIterator is returned from FilterClaimAdded and is used to iterate over the raw logs and unpacked data for ClaimAdded events raised by the Identity contract.
type IdentityClaimAddedIterator struct {
	Event *IdentityClaimAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IdentityClaimAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IdentityClaimAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IdentityClaimAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IdentityClaimAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IdentityClaimAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IdentityClaimAdded represents a ClaimAdded event raised by the Identity contract.
type IdentityClaimAdded struct {
	ClaimId   [32]byte
	Topic     *big.Int
	Scheme    *big.Int
	Issuer    common.Address
	Signature []byte
	Data      []byte
	Uri       string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterClaimAdded is a free log retrieval operation binding the contract event 0x46149b18aa084502c3f12bc75e19eda8bda8d102b82cce8474677a6d0d5f43c5.
//
// Solidity: e ClaimAdded(claimId indexed bytes32, topic indexed uint256, scheme uint256, issuer indexed address, signature bytes, data bytes, uri string)
func (_Identity *IdentityFilterer) FilterClaimAdded(opts *bind.FilterOpts, claimId [][32]byte, topic []*big.Int, issuer []common.Address) (*IdentityClaimAddedIterator, error) {

	var claimIdRule []interface{}
	for _, claimIdItem := range claimId {
		claimIdRule = append(claimIdRule, claimIdItem)
	}
	var topicRule []interface{}
	for _, topicItem := range topic {
		topicRule = append(topicRule, topicItem)
	}

	var issuerRule []interface{}
	for _, issuerItem := range issuer {
		issuerRule = append(issuerRule, issuerItem)
	}

	logs, sub, err := _Identity.contract.FilterLogs(opts, "ClaimAdded", claimIdRule, topicRule, issuerRule)
	if err != nil {
		return nil, err
	}
	return &IdentityClaimAddedIterator{contract: _Identity.contract, event: "ClaimAdded", logs: logs, sub: sub}, nil
}

// WatchClaimAdded is a free log subscription operation binding the contract event 0x46149b18aa084502c3f12bc75e19eda8bda8d102b82cce8474677a6d0d5f43c5.
//
// Solidity: e ClaimAdded(claimId indexed bytes32, topic indexed uint256, scheme uint256, issuer indexed address, signature bytes, data bytes, uri string)
func (_Identity *IdentityFilterer) WatchClaimAdded(opts *bind.WatchOpts, sink chan<- *IdentityClaimAdded, claimId [][32]byte, topic []*big.Int, issuer []common.Address) (event.Subscription, error) {

	var claimIdRule []interface{}
	for _, claimIdItem := range claimId {
		claimIdRule = append(claimIdRule, claimIdItem)
	}
	var topicRule []interface{}
	for _, topicItem := range topic {
		topicRule = append(topicRule, topicItem)
	}

	var issuerRule []interface{}
	for _, issuerItem := range issuer {
		issuerRule = append(issuerRule, issuerItem)
	}

	logs, sub, err := _Identity.contract.WatchLogs(opts, "ClaimAdded", claimIdRule, topicRule, issuerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IdentityClaimAdded)
				if err := _Identity.contract.UnpackLog(event, "ClaimAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IdentityClaimChangedIterator is returned from FilterClaimChanged and is used to iterate over the raw logs and unpacked data for ClaimChanged events raised by the Identity contract.
type IdentityClaimChangedIterator struct {
	Event *IdentityClaimChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IdentityClaimChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IdentityClaimChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IdentityClaimChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IdentityClaimChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IdentityClaimChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IdentityClaimChanged represents a ClaimChanged event raised by the Identity contract.
type IdentityClaimChanged struct {
	ClaimId   [32]byte
	Topic     *big.Int
	Scheme    *big.Int
	Issuer    common.Address
	Signature []byte
	Data      []byte
	Uri       string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterClaimChanged is a free log retrieval operation binding the contract event 0x3bab293fc00db832d7619a9299914251b8747c036867ec056cbd506f60135b13.
//
// Solidity: e ClaimChanged(claimId indexed bytes32, topic indexed uint256, scheme uint256, issuer indexed address, signature bytes, data bytes, uri string)
func (_Identity *IdentityFilterer) FilterClaimChanged(opts *bind.FilterOpts, claimId [][32]byte, topic []*big.Int, issuer []common.Address) (*IdentityClaimChangedIterator, error) {

	var claimIdRule []interface{}
	for _, claimIdItem := range claimId {
		claimIdRule = append(claimIdRule, claimIdItem)
	}
	var topicRule []interface{}
	for _, topicItem := range topic {
		topicRule = append(topicRule, topicItem)
	}

	var issuerRule []interface{}
	for _, issuerItem := range issuer {
		issuerRule = append(issuerRule, issuerItem)
	}

	logs, sub, err := _Identity.contract.FilterLogs(opts, "ClaimChanged", claimIdRule, topicRule, issuerRule)
	if err != nil {
		return nil, err
	}
	return &IdentityClaimChangedIterator{contract: _Identity.contract, event: "ClaimChanged", logs: logs, sub: sub}, nil
}

// WatchClaimChanged is a free log subscription operation binding the contract event 0x3bab293fc00db832d7619a9299914251b8747c036867ec056cbd506f60135b13.
//
// Solidity: e ClaimChanged(claimId indexed bytes32, topic indexed uint256, scheme uint256, issuer indexed address, signature bytes, data bytes, uri string)
func (_Identity *IdentityFilterer) WatchClaimChanged(opts *bind.WatchOpts, sink chan<- *IdentityClaimChanged, claimId [][32]byte, topic []*big.Int, issuer []common.Address) (event.Subscription, error) {

	var claimIdRule []interface{}
	for _, claimIdItem := range claimId {
		claimIdRule = append(claimIdRule, claimIdItem)
	}
	var topicRule []interface{}
	for _, topicItem := range topic {
		topicRule = append(topicRule, topicItem)
	}

	var issuerRule []interface{}
	for _, issuerItem := range issuer {
		issuerRule = append(issuerRule, issuerItem)
	}

	logs, sub, err := _Identity.contract.WatchLogs(opts, "ClaimChanged", claimIdRule, topicRule, issuerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IdentityClaimChanged)
				if err := _Identity.contract.UnpackLog(event, "ClaimChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IdentityClaimRemovedIterator is returned from FilterClaimRemoved and is used to iterate over the raw logs and unpacked data for ClaimRemoved events raised by the Identity contract.
type IdentityClaimRemovedIterator struct {
	Event *IdentityClaimRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IdentityClaimRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IdentityClaimRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IdentityClaimRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IdentityClaimRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IdentityClaimRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IdentityClaimRemoved represents a ClaimRemoved event raised by the Identity contract.
type IdentityClaimRemoved struct {
	ClaimId   [32]byte
	Topic     *big.Int
	Scheme    *big.Int
	Issuer    common.Address
	Signature []byte
	Data      []byte
	Uri       string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterClaimRemoved is a free log retrieval operation binding the contract event 0x3cf57863a89432c61c4a27073c6ee39e8a764bff5a05aebfbcdcdc80b2e6130a.
//
// Solidity: e ClaimRemoved(claimId indexed bytes32, topic indexed uint256, scheme uint256, issuer indexed address, signature bytes, data bytes, uri string)
func (_Identity *IdentityFilterer) FilterClaimRemoved(opts *bind.FilterOpts, claimId [][32]byte, topic []*big.Int, issuer []common.Address) (*IdentityClaimRemovedIterator, error) {

	var claimIdRule []interface{}
	for _, claimIdItem := range claimId {
		claimIdRule = append(claimIdRule, claimIdItem)
	}
	var topicRule []interface{}
	for _, topicItem := range topic {
		topicRule = append(topicRule, topicItem)
	}

	var issuerRule []interface{}
	for _, issuerItem := range issuer {
		issuerRule = append(issuerRule, issuerItem)
	}

	logs, sub, err := _Identity.contract.FilterLogs(opts, "ClaimRemoved", claimIdRule, topicRule, issuerRule)
	if err != nil {
		return nil, err
	}
	return &IdentityClaimRemovedIterator{contract: _Identity.contract, event: "ClaimRemoved", logs: logs, sub: sub}, nil
}

// WatchClaimRemoved is a free log subscription operation binding the contract event 0x3cf57863a89432c61c4a27073c6ee39e8a764bff5a05aebfbcdcdc80b2e6130a.
//
// Solidity: e ClaimRemoved(claimId indexed bytes32, topic indexed uint256, scheme uint256, issuer indexed address, signature bytes, data bytes, uri string)
func (_Identity *IdentityFilterer) WatchClaimRemoved(opts *bind.WatchOpts, sink chan<- *IdentityClaimRemoved, claimId [][32]byte, topic []*big.Int, issuer []common.Address) (event.Subscription, error) {

	var claimIdRule []interface{}
	for _, claimIdItem := range claimId {
		claimIdRule = append(claimIdRule, claimIdItem)
	}
	var topicRule []interface{}
	for _, topicItem := range topic {
		topicRule = append(topicRule, topicItem)
	}

	var issuerRule []interface{}
	for _, issuerItem := range issuer {
		issuerRule = append(issuerRule, issuerItem)
	}

	logs, sub, err := _Identity.contract.WatchLogs(opts, "ClaimRemoved", claimIdRule, topicRule, issuerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IdentityClaimRemoved)
				if err := _Identity.contract.UnpackLog(event, "ClaimRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IdentityClaimRequestedIterator is returned from FilterClaimRequested and is used to iterate over the raw logs and unpacked data for ClaimRequested events raised by the Identity contract.
type IdentityClaimRequestedIterator struct {
	Event *IdentityClaimRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IdentityClaimRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IdentityClaimRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IdentityClaimRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IdentityClaimRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IdentityClaimRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IdentityClaimRequested represents a ClaimRequested event raised by the Identity contract.
type IdentityClaimRequested struct {
	ClaimRequestId *big.Int
	Topic          *big.Int
	Scheme         *big.Int
	Issuer         common.Address
	Signature      []byte
	Data           []byte
	Uri            string
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterClaimRequested is a free log retrieval operation binding the contract event 0xe6b6db97dedfb44cbced367387e40b3f92dbee1b1be87f9367f7b673532b0d69.
//
// Solidity: e ClaimRequested(claimRequestId indexed uint256, topic indexed uint256, scheme uint256, issuer indexed address, signature bytes, data bytes, uri string)
func (_Identity *IdentityFilterer) FilterClaimRequested(opts *bind.FilterOpts, claimRequestId []*big.Int, topic []*big.Int, issuer []common.Address) (*IdentityClaimRequestedIterator, error) {

	var claimRequestIdRule []interface{}
	for _, claimRequestIdItem := range claimRequestId {
		claimRequestIdRule = append(claimRequestIdRule, claimRequestIdItem)
	}
	var topicRule []interface{}
	for _, topicItem := range topic {
		topicRule = append(topicRule, topicItem)
	}

	var issuerRule []interface{}
	for _, issuerItem := range issuer {
		issuerRule = append(issuerRule, issuerItem)
	}

	logs, sub, err := _Identity.contract.FilterLogs(opts, "ClaimRequested", claimRequestIdRule, topicRule, issuerRule)
	if err != nil {
		return nil, err
	}
	return &IdentityClaimRequestedIterator{contract: _Identity.contract, event: "ClaimRequested", logs: logs, sub: sub}, nil
}

// WatchClaimRequested is a free log subscription operation binding the contract event 0xe6b6db97dedfb44cbced367387e40b3f92dbee1b1be87f9367f7b673532b0d69.
//
// Solidity: e ClaimRequested(claimRequestId indexed uint256, topic indexed uint256, scheme uint256, issuer indexed address, signature bytes, data bytes, uri string)
func (_Identity *IdentityFilterer) WatchClaimRequested(opts *bind.WatchOpts, sink chan<- *IdentityClaimRequested, claimRequestId []*big.Int, topic []*big.Int, issuer []common.Address) (event.Subscription, error) {

	var claimRequestIdRule []interface{}
	for _, claimRequestIdItem := range claimRequestId {
		claimRequestIdRule = append(claimRequestIdRule, claimRequestIdItem)
	}
	var topicRule []interface{}
	for _, topicItem := range topic {
		topicRule = append(topicRule, topicItem)
	}

	var issuerRule []interface{}
	for _, issuerItem := range issuer {
		issuerRule = append(issuerRule, issuerItem)
	}

	logs, sub, err := _Identity.contract.WatchLogs(opts, "ClaimRequested", claimRequestIdRule, topicRule, issuerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IdentityClaimRequested)
				if err := _Identity.contract.UnpackLog(event, "ClaimRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IdentityExecutedIterator is returned from FilterExecuted and is used to iterate over the raw logs and unpacked data for Executed events raised by the Identity contract.
type IdentityExecutedIterator struct {
	Event *IdentityExecuted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IdentityExecutedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IdentityExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IdentityExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IdentityExecutedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IdentityExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IdentityExecuted represents a Executed event raised by the Identity contract.
type IdentityExecuted struct {
	ExecutionId *big.Int
	To          common.Address
	Value       *big.Int
	Data        []byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterExecuted is a free log retrieval operation binding the contract event 0x1f920dbda597d7bf95035464170fa58d0a4b57f13a1c315ace6793b9f63688b8.
//
// Solidity: e Executed(executionId indexed uint256, to indexed address, value indexed uint256, data bytes)
func (_Identity *IdentityFilterer) FilterExecuted(opts *bind.FilterOpts, executionId []*big.Int, to []common.Address, value []*big.Int) (*IdentityExecutedIterator, error) {

	var executionIdRule []interface{}
	for _, executionIdItem := range executionId {
		executionIdRule = append(executionIdRule, executionIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _Identity.contract.FilterLogs(opts, "Executed", executionIdRule, toRule, valueRule)
	if err != nil {
		return nil, err
	}
	return &IdentityExecutedIterator{contract: _Identity.contract, event: "Executed", logs: logs, sub: sub}, nil
}

// WatchExecuted is a free log subscription operation binding the contract event 0x1f920dbda597d7bf95035464170fa58d0a4b57f13a1c315ace6793b9f63688b8.
//
// Solidity: e Executed(executionId indexed uint256, to indexed address, value indexed uint256, data bytes)
func (_Identity *IdentityFilterer) WatchExecuted(opts *bind.WatchOpts, sink chan<- *IdentityExecuted, executionId []*big.Int, to []common.Address, value []*big.Int) (event.Subscription, error) {

	var executionIdRule []interface{}
	for _, executionIdItem := range executionId {
		executionIdRule = append(executionIdRule, executionIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _Identity.contract.WatchLogs(opts, "Executed", executionIdRule, toRule, valueRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IdentityExecuted)
				if err := _Identity.contract.UnpackLog(event, "Executed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IdentityExecutionFailedIterator is returned from FilterExecutionFailed and is used to iterate over the raw logs and unpacked data for ExecutionFailed events raised by the Identity contract.
type IdentityExecutionFailedIterator struct {
	Event *IdentityExecutionFailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IdentityExecutionFailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IdentityExecutionFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IdentityExecutionFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IdentityExecutionFailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IdentityExecutionFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IdentityExecutionFailed represents a ExecutionFailed event raised by the Identity contract.
type IdentityExecutionFailed struct {
	ExecutionId *big.Int
	To          common.Address
	Value       *big.Int
	Data        []byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterExecutionFailed is a free log retrieval operation binding the contract event 0xe10c49d9f7c71da23262367013434763cfdb2332267641728d25cd712c5c6a68.
//
// Solidity: e ExecutionFailed(executionId indexed uint256, to indexed address, value indexed uint256, data bytes)
func (_Identity *IdentityFilterer) FilterExecutionFailed(opts *bind.FilterOpts, executionId []*big.Int, to []common.Address, value []*big.Int) (*IdentityExecutionFailedIterator, error) {

	var executionIdRule []interface{}
	for _, executionIdItem := range executionId {
		executionIdRule = append(executionIdRule, executionIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _Identity.contract.FilterLogs(opts, "ExecutionFailed", executionIdRule, toRule, valueRule)
	if err != nil {
		return nil, err
	}
	return &IdentityExecutionFailedIterator{contract: _Identity.contract, event: "ExecutionFailed", logs: logs, sub: sub}, nil
}

// WatchExecutionFailed is a free log subscription operation binding the contract event 0xe10c49d9f7c71da23262367013434763cfdb2332267641728d25cd712c5c6a68.
//
// Solidity: e ExecutionFailed(executionId indexed uint256, to indexed address, value indexed uint256, data bytes)
func (_Identity *IdentityFilterer) WatchExecutionFailed(opts *bind.WatchOpts, sink chan<- *IdentityExecutionFailed, executionId []*big.Int, to []common.Address, value []*big.Int) (event.Subscription, error) {

	var executionIdRule []interface{}
	for _, executionIdItem := range executionId {
		executionIdRule = append(executionIdRule, executionIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _Identity.contract.WatchLogs(opts, "ExecutionFailed", executionIdRule, toRule, valueRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IdentityExecutionFailed)
				if err := _Identity.contract.UnpackLog(event, "ExecutionFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IdentityExecutionRequestedIterator is returned from FilterExecutionRequested and is used to iterate over the raw logs and unpacked data for ExecutionRequested events raised by the Identity contract.
type IdentityExecutionRequestedIterator struct {
	Event *IdentityExecutionRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IdentityExecutionRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IdentityExecutionRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IdentityExecutionRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IdentityExecutionRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IdentityExecutionRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IdentityExecutionRequested represents a ExecutionRequested event raised by the Identity contract.
type IdentityExecutionRequested struct {
	ExecutionId *big.Int
	To          common.Address
	Value       *big.Int
	Data        []byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterExecutionRequested is a free log retrieval operation binding the contract event 0x8afcfabcb00e47a53a8fc3e9f23ff47ee1926194bb1350dd007c50b412a6cee8.
//
// Solidity: e ExecutionRequested(executionId indexed uint256, to indexed address, value indexed uint256, data bytes)
func (_Identity *IdentityFilterer) FilterExecutionRequested(opts *bind.FilterOpts, executionId []*big.Int, to []common.Address, value []*big.Int) (*IdentityExecutionRequestedIterator, error) {

	var executionIdRule []interface{}
	for _, executionIdItem := range executionId {
		executionIdRule = append(executionIdRule, executionIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _Identity.contract.FilterLogs(opts, "ExecutionRequested", executionIdRule, toRule, valueRule)
	if err != nil {
		return nil, err
	}
	return &IdentityExecutionRequestedIterator{contract: _Identity.contract, event: "ExecutionRequested", logs: logs, sub: sub}, nil
}

// WatchExecutionRequested is a free log subscription operation binding the contract event 0x8afcfabcb00e47a53a8fc3e9f23ff47ee1926194bb1350dd007c50b412a6cee8.
//
// Solidity: e ExecutionRequested(executionId indexed uint256, to indexed address, value indexed uint256, data bytes)
func (_Identity *IdentityFilterer) WatchExecutionRequested(opts *bind.WatchOpts, sink chan<- *IdentityExecutionRequested, executionId []*big.Int, to []common.Address, value []*big.Int) (event.Subscription, error) {

	var executionIdRule []interface{}
	for _, executionIdItem := range executionId {
		executionIdRule = append(executionIdRule, executionIdItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var valueRule []interface{}
	for _, valueItem := range value {
		valueRule = append(valueRule, valueItem)
	}

	logs, sub, err := _Identity.contract.WatchLogs(opts, "ExecutionRequested", executionIdRule, toRule, valueRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IdentityExecutionRequested)
				if err := _Identity.contract.UnpackLog(event, "ExecutionRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IdentityKeyAddedIterator is returned from FilterKeyAdded and is used to iterate over the raw logs and unpacked data for KeyAdded events raised by the Identity contract.
type IdentityKeyAddedIterator struct {
	Event *IdentityKeyAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IdentityKeyAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IdentityKeyAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IdentityKeyAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IdentityKeyAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IdentityKeyAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IdentityKeyAdded represents a KeyAdded event raised by the Identity contract.
type IdentityKeyAdded struct {
	Key     [32]byte
	Purpose *big.Int
	KeyType *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterKeyAdded is a free log retrieval operation binding the contract event 0x480000bb1edad8ca1470381cc334b1917fbd51c6531f3a623ea8e0ec7e38a6e9.
//
// Solidity: e KeyAdded(key indexed bytes32, purpose indexed uint256, keyType indexed uint256)
func (_Identity *IdentityFilterer) FilterKeyAdded(opts *bind.FilterOpts, key [][32]byte, purpose []*big.Int, keyType []*big.Int) (*IdentityKeyAddedIterator, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var purposeRule []interface{}
	for _, purposeItem := range purpose {
		purposeRule = append(purposeRule, purposeItem)
	}
	var keyTypeRule []interface{}
	for _, keyTypeItem := range keyType {
		keyTypeRule = append(keyTypeRule, keyTypeItem)
	}

	logs, sub, err := _Identity.contract.FilterLogs(opts, "KeyAdded", keyRule, purposeRule, keyTypeRule)
	if err != nil {
		return nil, err
	}
	return &IdentityKeyAddedIterator{contract: _Identity.contract, event: "KeyAdded", logs: logs, sub: sub}, nil
}

// WatchKeyAdded is a free log subscription operation binding the contract event 0x480000bb1edad8ca1470381cc334b1917fbd51c6531f3a623ea8e0ec7e38a6e9.
//
// Solidity: e KeyAdded(key indexed bytes32, purpose indexed uint256, keyType indexed uint256)
func (_Identity *IdentityFilterer) WatchKeyAdded(opts *bind.WatchOpts, sink chan<- *IdentityKeyAdded, key [][32]byte, purpose []*big.Int, keyType []*big.Int) (event.Subscription, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var purposeRule []interface{}
	for _, purposeItem := range purpose {
		purposeRule = append(purposeRule, purposeItem)
	}
	var keyTypeRule []interface{}
	for _, keyTypeItem := range keyType {
		keyTypeRule = append(keyTypeRule, keyTypeItem)
	}

	logs, sub, err := _Identity.contract.WatchLogs(opts, "KeyAdded", keyRule, purposeRule, keyTypeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IdentityKeyAdded)
				if err := _Identity.contract.UnpackLog(event, "KeyAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IdentityKeyRemovedIterator is returned from FilterKeyRemoved and is used to iterate over the raw logs and unpacked data for KeyRemoved events raised by the Identity contract.
type IdentityKeyRemovedIterator struct {
	Event *IdentityKeyRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IdentityKeyRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IdentityKeyRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IdentityKeyRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IdentityKeyRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IdentityKeyRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IdentityKeyRemoved represents a KeyRemoved event raised by the Identity contract.
type IdentityKeyRemoved struct {
	Key     [32]byte
	Purpose *big.Int
	KeyType *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterKeyRemoved is a free log retrieval operation binding the contract event 0x585a4aef50f8267a92b32412b331b20f7f8b96f2245b253b9cc50dcc621d3397.
//
// Solidity: e KeyRemoved(key indexed bytes32, purpose indexed uint256, keyType indexed uint256)
func (_Identity *IdentityFilterer) FilterKeyRemoved(opts *bind.FilterOpts, key [][32]byte, purpose []*big.Int, keyType []*big.Int) (*IdentityKeyRemovedIterator, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var purposeRule []interface{}
	for _, purposeItem := range purpose {
		purposeRule = append(purposeRule, purposeItem)
	}
	var keyTypeRule []interface{}
	for _, keyTypeItem := range keyType {
		keyTypeRule = append(keyTypeRule, keyTypeItem)
	}

	logs, sub, err := _Identity.contract.FilterLogs(opts, "KeyRemoved", keyRule, purposeRule, keyTypeRule)
	if err != nil {
		return nil, err
	}
	return &IdentityKeyRemovedIterator{contract: _Identity.contract, event: "KeyRemoved", logs: logs, sub: sub}, nil
}

// WatchKeyRemoved is a free log subscription operation binding the contract event 0x585a4aef50f8267a92b32412b331b20f7f8b96f2245b253b9cc50dcc621d3397.
//
// Solidity: e KeyRemoved(key indexed bytes32, purpose indexed uint256, keyType indexed uint256)
func (_Identity *IdentityFilterer) WatchKeyRemoved(opts *bind.WatchOpts, sink chan<- *IdentityKeyRemoved, key [][32]byte, purpose []*big.Int, keyType []*big.Int) (event.Subscription, error) {

	var keyRule []interface{}
	for _, keyItem := range key {
		keyRule = append(keyRule, keyItem)
	}
	var purposeRule []interface{}
	for _, purposeItem := range purpose {
		purposeRule = append(purposeRule, purposeItem)
	}
	var keyTypeRule []interface{}
	for _, keyTypeItem := range keyType {
		keyTypeRule = append(keyTypeRule, keyTypeItem)
	}

	logs, sub, err := _Identity.contract.WatchLogs(opts, "KeyRemoved", keyRule, purposeRule, keyTypeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IdentityKeyRemoved)
				if err := _Identity.contract.UnpackLog(event, "KeyRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IdentityLogPauseIterator is returned from FilterLogPause and is used to iterate over the raw logs and unpacked data for LogPause events raised by the Identity contract.
type IdentityLogPauseIterator struct {
	Event *IdentityLogPause // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IdentityLogPauseIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IdentityLogPause)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IdentityLogPause)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IdentityLogPauseIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IdentityLogPauseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IdentityLogPause represents a LogPause event raised by the Identity contract.
type IdentityLogPause struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogPause is a free log retrieval operation binding the contract event 0x4b314b34e912fda7f95e7d23e9c8c95f82f0aff1984e4ce592a0b005f9055624.
//
// Solidity: e LogPause()
func (_Identity *IdentityFilterer) FilterLogPause(opts *bind.FilterOpts) (*IdentityLogPauseIterator, error) {

	logs, sub, err := _Identity.contract.FilterLogs(opts, "LogPause")
	if err != nil {
		return nil, err
	}
	return &IdentityLogPauseIterator{contract: _Identity.contract, event: "LogPause", logs: logs, sub: sub}, nil
}

// WatchLogPause is a free log subscription operation binding the contract event 0x4b314b34e912fda7f95e7d23e9c8c95f82f0aff1984e4ce592a0b005f9055624.
//
// Solidity: e LogPause()
func (_Identity *IdentityFilterer) WatchLogPause(opts *bind.WatchOpts, sink chan<- *IdentityLogPause) (event.Subscription, error) {

	logs, sub, err := _Identity.contract.WatchLogs(opts, "LogPause")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IdentityLogPause)
				if err := _Identity.contract.UnpackLog(event, "LogPause", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IdentityLogUnpauseIterator is returned from FilterLogUnpause and is used to iterate over the raw logs and unpacked data for LogUnpause events raised by the Identity contract.
type IdentityLogUnpauseIterator struct {
	Event *IdentityLogUnpause // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IdentityLogUnpauseIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IdentityLogUnpause)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IdentityLogUnpause)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IdentityLogUnpauseIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IdentityLogUnpauseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IdentityLogUnpause represents a LogUnpause event raised by the Identity contract.
type IdentityLogUnpause struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterLogUnpause is a free log retrieval operation binding the contract event 0x730c1faaa977b67dacf1e2451ef54556e04a07d577785ff79f6d31f73502efc9.
//
// Solidity: e LogUnpause()
func (_Identity *IdentityFilterer) FilterLogUnpause(opts *bind.FilterOpts) (*IdentityLogUnpauseIterator, error) {

	logs, sub, err := _Identity.contract.FilterLogs(opts, "LogUnpause")
	if err != nil {
		return nil, err
	}
	return &IdentityLogUnpauseIterator{contract: _Identity.contract, event: "LogUnpause", logs: logs, sub: sub}, nil
}

// WatchLogUnpause is a free log subscription operation binding the contract event 0x730c1faaa977b67dacf1e2451ef54556e04a07d577785ff79f6d31f73502efc9.
//
// Solidity: e LogUnpause()
func (_Identity *IdentityFilterer) WatchLogUnpause(opts *bind.WatchOpts, sink chan<- *IdentityLogUnpause) (event.Subscription, error) {

	logs, sub, err := _Identity.contract.WatchLogs(opts, "LogUnpause")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IdentityLogUnpause)
				if err := _Identity.contract.UnpackLog(event, "LogUnpause", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

type metaIDKey struct {
	Purposes []*big.Int
	KeyType  *big.Int
	Key      [32]byte
}
