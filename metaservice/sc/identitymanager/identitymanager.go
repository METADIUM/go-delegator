// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package identitymanager

import (
	"math/big"
	"strings"

	ethereum "github.com/metadium/go-metadium"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// IdentitymanagerABI is the input ABI used to generate the binding from.
const IdentitymanagerABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"REG\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isPermitted\",\"outputs\":[{\"name\":\"found\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"THIS_NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metaIds\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"managementKey\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"metaId\",\"type\":\"address\"}],\"name\":\"CreateMetaId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"name\":\"_managementKey\",\"type\":\"address\"}],\"name\":\"createMetaId\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_metaId\",\"type\":\"address\"},{\"name\":\"_managementKey\",\"type\":\"address\"}],\"name\":\"addMetaId\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDeployedMetaIds\",\"outputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isMetaId\",\"outputs\":[{\"name\":\"found\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLengthOfMetaIds\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// IdentitymanagerBin is the compiled bytecode used for deploying new contracts.
const IdentitymanagerBin = ``

// DeployIdentitymanager deploys a new Ethereum contract, binding an instance of Identitymanager to it.
func DeployIdentitymanager(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Identitymanager, error) {
	parsed, err := abi.JSON(strings.NewReader(IdentitymanagerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(IdentitymanagerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Identitymanager{IdentitymanagerCaller: IdentitymanagerCaller{contract: contract}, IdentitymanagerTransactor: IdentitymanagerTransactor{contract: contract}, IdentitymanagerFilterer: IdentitymanagerFilterer{contract: contract}}, nil
}

// Identitymanager is an auto generated Go binding around an Ethereum contract.
type Identitymanager struct {
	IdentitymanagerCaller     // Read-only binding to the contract
	IdentitymanagerTransactor // Write-only binding to the contract
	IdentitymanagerFilterer   // Log filterer for contract events
}

// IdentitymanagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type IdentitymanagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IdentitymanagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IdentitymanagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IdentitymanagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IdentitymanagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IdentitymanagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IdentitymanagerSession struct {
	Contract     *Identitymanager  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IdentitymanagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IdentitymanagerCallerSession struct {
	Contract *IdentitymanagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// IdentitymanagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IdentitymanagerTransactorSession struct {
	Contract     *IdentitymanagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// IdentitymanagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type IdentitymanagerRaw struct {
	Contract *Identitymanager // Generic contract binding to access the raw methods on
}

// IdentitymanagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IdentitymanagerCallerRaw struct {
	Contract *IdentitymanagerCaller // Generic read-only contract binding to access the raw methods on
}

// IdentitymanagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IdentitymanagerTransactorRaw struct {
	Contract *IdentitymanagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIdentitymanager creates a new instance of Identitymanager, bound to a specific deployed contract.
func NewIdentitymanager(address common.Address, backend bind.ContractBackend) (*Identitymanager, error) {
	contract, err := bindIdentitymanager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Identitymanager{IdentitymanagerCaller: IdentitymanagerCaller{contract: contract}, IdentitymanagerTransactor: IdentitymanagerTransactor{contract: contract}, IdentitymanagerFilterer: IdentitymanagerFilterer{contract: contract}}, nil
}

// NewIdentitymanagerCaller creates a new read-only instance of Identitymanager, bound to a specific deployed contract.
func NewIdentitymanagerCaller(address common.Address, caller bind.ContractCaller) (*IdentitymanagerCaller, error) {
	contract, err := bindIdentitymanager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IdentitymanagerCaller{contract: contract}, nil
}

// NewIdentitymanagerTransactor creates a new write-only instance of Identitymanager, bound to a specific deployed contract.
func NewIdentitymanagerTransactor(address common.Address, transactor bind.ContractTransactor) (*IdentitymanagerTransactor, error) {
	contract, err := bindIdentitymanager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IdentitymanagerTransactor{contract: contract}, nil
}

// NewIdentitymanagerFilterer creates a new log filterer instance of Identitymanager, bound to a specific deployed contract.
func NewIdentitymanagerFilterer(address common.Address, filterer bind.ContractFilterer) (*IdentitymanagerFilterer, error) {
	contract, err := bindIdentitymanager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IdentitymanagerFilterer{contract: contract}, nil
}

// bindIdentitymanager binds a generic wrapper to an already deployed contract.
func bindIdentitymanager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IdentitymanagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Identitymanager *IdentitymanagerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Identitymanager.Contract.IdentitymanagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Identitymanager *IdentitymanagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Identitymanager.Contract.IdentitymanagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Identitymanager *IdentitymanagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Identitymanager.Contract.IdentitymanagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Identitymanager *IdentitymanagerCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Identitymanager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Identitymanager *IdentitymanagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Identitymanager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Identitymanager *IdentitymanagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Identitymanager.Contract.contract.Transact(opts, method, params...)
}

// REG is a free data retrieval call binding the contract method 0x39363112.
//
// Solidity: function REG() constant returns(address)
func (_Identitymanager *IdentitymanagerCaller) REG(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Identitymanager.contract.Call(opts, out, "REG")
	return *ret0, err
}

// REG is a free data retrieval call binding the contract method 0x39363112.
//
// Solidity: function REG() constant returns(address)
func (_Identitymanager *IdentitymanagerSession) REG() (common.Address, error) {
	return _Identitymanager.Contract.REG(&_Identitymanager.CallOpts)
}

// REG is a free data retrieval call binding the contract method 0x39363112.
//
// Solidity: function REG() constant returns(address)
func (_Identitymanager *IdentitymanagerCallerSession) REG() (common.Address, error) {
	return _Identitymanager.Contract.REG(&_Identitymanager.CallOpts)
}

// THISNAME is a free data retrieval call binding the contract method 0x64319d0b.
//
// Solidity: function THIS_NAME() constant returns(bytes32)
func (_Identitymanager *IdentitymanagerCaller) THISNAME(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Identitymanager.contract.Call(opts, out, "THIS_NAME")
	return *ret0, err
}

// THISNAME is a free data retrieval call binding the contract method 0x64319d0b.
//
// Solidity: function THIS_NAME() constant returns(bytes32)
func (_Identitymanager *IdentitymanagerSession) THISNAME() ([32]byte, error) {
	return _Identitymanager.Contract.THISNAME(&_Identitymanager.CallOpts)
}

// THISNAME is a free data retrieval call binding the contract method 0x64319d0b.
//
// Solidity: function THIS_NAME() constant returns(bytes32)
func (_Identitymanager *IdentitymanagerCallerSession) THISNAME() ([32]byte, error) {
	return _Identitymanager.Contract.THISNAME(&_Identitymanager.CallOpts)
}

// GetDeployedMetaIds is a free data retrieval call binding the contract method 0xab1796cf.
//
// Solidity: function getDeployedMetaIds() constant returns(addrs address[])
func (_Identitymanager *IdentitymanagerCaller) GetDeployedMetaIds(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _Identitymanager.contract.Call(opts, out, "getDeployedMetaIds")
	return *ret0, err
}

// GetDeployedMetaIds is a free data retrieval call binding the contract method 0xab1796cf.
//
// Solidity: function getDeployedMetaIds() constant returns(addrs address[])
func (_Identitymanager *IdentitymanagerSession) GetDeployedMetaIds() ([]common.Address, error) {
	return _Identitymanager.Contract.GetDeployedMetaIds(&_Identitymanager.CallOpts)
}

// GetDeployedMetaIds is a free data retrieval call binding the contract method 0xab1796cf.
//
// Solidity: function getDeployedMetaIds() constant returns(addrs address[])
func (_Identitymanager *IdentitymanagerCallerSession) GetDeployedMetaIds() ([]common.Address, error) {
	return _Identitymanager.Contract.GetDeployedMetaIds(&_Identitymanager.CallOpts)
}

// GetLengthOfMetaIds is a free data retrieval call binding the contract method 0x57296f07.
//
// Solidity: function getLengthOfMetaIds() constant returns(length uint256)
func (_Identitymanager *IdentitymanagerCaller) GetLengthOfMetaIds(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Identitymanager.contract.Call(opts, out, "getLengthOfMetaIds")
	return *ret0, err
}

// GetLengthOfMetaIds is a free data retrieval call binding the contract method 0x57296f07.
//
// Solidity: function getLengthOfMetaIds() constant returns(length uint256)
func (_Identitymanager *IdentitymanagerSession) GetLengthOfMetaIds() (*big.Int, error) {
	return _Identitymanager.Contract.GetLengthOfMetaIds(&_Identitymanager.CallOpts)
}

// GetLengthOfMetaIds is a free data retrieval call binding the contract method 0x57296f07.
//
// Solidity: function getLengthOfMetaIds() constant returns(length uint256)
func (_Identitymanager *IdentitymanagerCallerSession) GetLengthOfMetaIds() (*big.Int, error) {
	return _Identitymanager.Contract.GetLengthOfMetaIds(&_Identitymanager.CallOpts)
}

// IsMetaId is a free data retrieval call binding the contract method 0x12459b00.
//
// Solidity: function isMetaId(_addr address) constant returns(found bool)
func (_Identitymanager *IdentitymanagerCaller) IsMetaId(opts *bind.CallOpts, _addr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Identitymanager.contract.Call(opts, out, "isMetaId", _addr)
	return *ret0, err
}

// IsMetaId is a free data retrieval call binding the contract method 0x12459b00.
//
// Solidity: function isMetaId(_addr address) constant returns(found bool)
func (_Identitymanager *IdentitymanagerSession) IsMetaId(_addr common.Address) (bool, error) {
	return _Identitymanager.Contract.IsMetaId(&_Identitymanager.CallOpts, _addr)
}

// IsMetaId is a free data retrieval call binding the contract method 0x12459b00.
//
// Solidity: function isMetaId(_addr address) constant returns(found bool)
func (_Identitymanager *IdentitymanagerCallerSession) IsMetaId(_addr common.Address) (bool, error) {
	return _Identitymanager.Contract.IsMetaId(&_Identitymanager.CallOpts, _addr)
}

// IsPermitted is a free data retrieval call binding the contract method 0x3fd8cc4e.
//
// Solidity: function isPermitted(_addr address) constant returns(found bool)
func (_Identitymanager *IdentitymanagerCaller) IsPermitted(opts *bind.CallOpts, _addr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Identitymanager.contract.Call(opts, out, "isPermitted", _addr)
	return *ret0, err
}

// IsPermitted is a free data retrieval call binding the contract method 0x3fd8cc4e.
//
// Solidity: function isPermitted(_addr address) constant returns(found bool)
func (_Identitymanager *IdentitymanagerSession) IsPermitted(_addr common.Address) (bool, error) {
	return _Identitymanager.Contract.IsPermitted(&_Identitymanager.CallOpts, _addr)
}

// IsPermitted is a free data retrieval call binding the contract method 0x3fd8cc4e.
//
// Solidity: function isPermitted(_addr address) constant returns(found bool)
func (_Identitymanager *IdentitymanagerCallerSession) IsPermitted(_addr common.Address) (bool, error) {
	return _Identitymanager.Contract.IsPermitted(&_Identitymanager.CallOpts, _addr)
}

// MetaIds is a free data retrieval call binding the contract method 0x73fd4e8f.
//
// Solidity: function metaIds( uint256) constant returns(address)
func (_Identitymanager *IdentitymanagerCaller) MetaIds(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Identitymanager.contract.Call(opts, out, "metaIds", arg0)
	return *ret0, err
}

// MetaIds is a free data retrieval call binding the contract method 0x73fd4e8f.
//
// Solidity: function metaIds( uint256) constant returns(address)
func (_Identitymanager *IdentitymanagerSession) MetaIds(arg0 *big.Int) (common.Address, error) {
	return _Identitymanager.Contract.MetaIds(&_Identitymanager.CallOpts, arg0)
}

// MetaIds is a free data retrieval call binding the contract method 0x73fd4e8f.
//
// Solidity: function metaIds( uint256) constant returns(address)
func (_Identitymanager *IdentitymanagerCallerSession) MetaIds(arg0 *big.Int) (common.Address, error) {
	return _Identitymanager.Contract.MetaIds(&_Identitymanager.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Identitymanager *IdentitymanagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Identitymanager.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Identitymanager *IdentitymanagerSession) Owner() (common.Address, error) {
	return _Identitymanager.Contract.Owner(&_Identitymanager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Identitymanager *IdentitymanagerCallerSession) Owner() (common.Address, error) {
	return _Identitymanager.Contract.Owner(&_Identitymanager.CallOpts)
}

// AddMetaId is a paid mutator transaction binding the contract method 0x828baa80.
//
// Solidity: function addMetaId(_metaId address, _managementKey address) returns(success bool)
func (_Identitymanager *IdentitymanagerTransactor) AddMetaId(opts *bind.TransactOpts, _metaId common.Address, _managementKey common.Address) (*types.Transaction, error) {
	return _Identitymanager.contract.Transact(opts, "addMetaId", _metaId, _managementKey)
}

// AddMetaId is a paid mutator transaction binding the contract method 0x828baa80.
//
// Solidity: function addMetaId(_metaId address, _managementKey address) returns(success bool)
func (_Identitymanager *IdentitymanagerSession) AddMetaId(_metaId common.Address, _managementKey common.Address) (*types.Transaction, error) {
	return _Identitymanager.Contract.AddMetaId(&_Identitymanager.TransactOpts, _metaId, _managementKey)
}

// AddMetaId is a paid mutator transaction binding the contract method 0x828baa80.
//
// Solidity: function addMetaId(_metaId address, _managementKey address) returns(success bool)
func (_Identitymanager *IdentitymanagerTransactorSession) AddMetaId(_metaId common.Address, _managementKey common.Address) (*types.Transaction, error) {
	return _Identitymanager.Contract.AddMetaId(&_Identitymanager.TransactOpts, _metaId, _managementKey)
}

// CreateMetaId is a paid mutator transaction binding the contract method 0xdf483f53.
//
// Solidity: function createMetaId(_managementKey address) returns(success bool)
func (_Identitymanager *IdentitymanagerTransactor) CreateMetaId(opts *bind.TransactOpts, _managementKey common.Address) (*types.Transaction, error) {
	return _Identitymanager.contract.Transact(opts, "createMetaId", _managementKey)
}

// CreateMetaId is a paid mutator transaction binding the contract method 0xdf483f53.
//
// Solidity: function createMetaId(_managementKey address) returns(success bool)
func (_Identitymanager *IdentitymanagerSession) CreateMetaId(_managementKey common.Address) (*types.Transaction, error) {
	return _Identitymanager.Contract.CreateMetaId(&_Identitymanager.TransactOpts, _managementKey)
}

// CreateMetaId is a paid mutator transaction binding the contract method 0xdf483f53.
//
// Solidity: function createMetaId(_managementKey address) returns(success bool)
func (_Identitymanager *IdentitymanagerTransactorSession) CreateMetaId(_managementKey common.Address) (*types.Transaction, error) {
	return _Identitymanager.Contract.CreateMetaId(&_Identitymanager.TransactOpts, _managementKey)
}

// SetRegistry is a paid mutator transaction binding the contract method 0xa91ee0dc.
//
// Solidity: function setRegistry(_addr address) returns()
func (_Identitymanager *IdentitymanagerTransactor) SetRegistry(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _Identitymanager.contract.Transact(opts, "setRegistry", _addr)
}

// SetRegistry is a paid mutator transaction binding the contract method 0xa91ee0dc.
//
// Solidity: function setRegistry(_addr address) returns()
func (_Identitymanager *IdentitymanagerSession) SetRegistry(_addr common.Address) (*types.Transaction, error) {
	return _Identitymanager.Contract.SetRegistry(&_Identitymanager.TransactOpts, _addr)
}

// SetRegistry is a paid mutator transaction binding the contract method 0xa91ee0dc.
//
// Solidity: function setRegistry(_addr address) returns()
func (_Identitymanager *IdentitymanagerTransactorSession) SetRegistry(_addr common.Address) (*types.Transaction, error) {
	return _Identitymanager.Contract.SetRegistry(&_Identitymanager.TransactOpts, _addr)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(newOwner address) returns()
func (_Identitymanager *IdentitymanagerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Identitymanager.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(newOwner address) returns()
func (_Identitymanager *IdentitymanagerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Identitymanager.Contract.TransferOwnership(&_Identitymanager.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(newOwner address) returns()
func (_Identitymanager *IdentitymanagerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Identitymanager.Contract.TransferOwnership(&_Identitymanager.TransactOpts, newOwner)
}

// IdentitymanagerCreateMetaIdIterator is returned from FilterCreateMetaId and is used to iterate over the raw logs and unpacked data for CreateMetaId events raised by the Identitymanager contract.
type IdentitymanagerCreateMetaIdIterator struct {
	Event *IdentitymanagerCreateMetaId // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IdentitymanagerCreateMetaIdIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IdentitymanagerCreateMetaId)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IdentitymanagerCreateMetaId)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IdentitymanagerCreateMetaIdIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IdentitymanagerCreateMetaIdIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IdentitymanagerCreateMetaId represents a CreateMetaId event raised by the Identitymanager contract.
type IdentitymanagerCreateMetaId struct {
	ManagementKey common.Address
	MetaId        common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCreateMetaId is a free log retrieval operation binding the contract event 0x530662d7f09b3ad99f1a6c386579d429bed60b5cb0ffd969d5367a601bab3471.
//
// Solidity: e CreateMetaId(managementKey indexed address, metaId address)
func (_Identitymanager *IdentitymanagerFilterer) FilterCreateMetaId(opts *bind.FilterOpts, managementKey []common.Address) (*IdentitymanagerCreateMetaIdIterator, error) {

	var managementKeyRule []interface{}
	for _, managementKeyItem := range managementKey {
		managementKeyRule = append(managementKeyRule, managementKeyItem)
	}

	logs, sub, err := _Identitymanager.contract.FilterLogs(opts, "CreateMetaId", managementKeyRule)
	if err != nil {
		return nil, err
	}
	return &IdentitymanagerCreateMetaIdIterator{contract: _Identitymanager.contract, event: "CreateMetaId", logs: logs, sub: sub}, nil
}

// WatchCreateMetaId is a free log subscription operation binding the contract event 0x530662d7f09b3ad99f1a6c386579d429bed60b5cb0ffd969d5367a601bab3471.
//
// Solidity: e CreateMetaId(managementKey indexed address, metaId address)
func (_Identitymanager *IdentitymanagerFilterer) WatchCreateMetaId(opts *bind.WatchOpts, sink chan<- *IdentitymanagerCreateMetaId, managementKey []common.Address) (event.Subscription, error) {

	var managementKeyRule []interface{}
	for _, managementKeyItem := range managementKey {
		managementKeyRule = append(managementKeyRule, managementKeyItem)
	}

	logs, sub, err := _Identitymanager.contract.WatchLogs(opts, "CreateMetaId", managementKeyRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IdentitymanagerCreateMetaId)
				if err := _Identitymanager.contract.UnpackLog(event, "CreateMetaId", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IdentitymanagerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Identitymanager contract.
type IdentitymanagerOwnershipTransferredIterator struct {
	Event *IdentitymanagerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IdentitymanagerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IdentitymanagerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IdentitymanagerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IdentitymanagerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IdentitymanagerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IdentitymanagerOwnershipTransferred represents a OwnershipTransferred event raised by the Identitymanager contract.
type IdentitymanagerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: e OwnershipTransferred(previousOwner indexed address, newOwner indexed address)
func (_Identitymanager *IdentitymanagerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*IdentitymanagerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Identitymanager.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &IdentitymanagerOwnershipTransferredIterator{contract: _Identitymanager.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: e OwnershipTransferred(previousOwner indexed address, newOwner indexed address)
func (_Identitymanager *IdentitymanagerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *IdentitymanagerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Identitymanager.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IdentitymanagerOwnershipTransferred)
				if err := _Identitymanager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
